<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS进阶学习笔记</title>
      <link href="/2021/12/21/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/12/21/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS入门学习笔记</title>
      <link href="/2021/12/21/JS%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/12/21/JS%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一、JavaScript-入门"><a href="#一、JavaScript-入门" class="headerlink" title="一、JavaScript  入门"></a>一、JavaScript  入门</h2><p>JavaScript负责页面中的的行为。  </p><p>它是一门运行在浏览器端的脚本语言。  </p><h3 id="1-1-JS的编写的位置"><a href="#1-1-JS的编写的位置" class="headerlink" title="1.1 JS的编写的位置"></a>1.1 JS的编写的位置</h3><ul><li>可以编写到标签的指定属性中  </li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:alert(<span class="token punctuation">'</span>aaa<span class="token punctuation">'</span>);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  </code></pre><ul><li>可以编写到script标签中  </li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">//编写js代码  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  </code></pre><ul><li>可以将代码编写到外部的js文件中，然后通过标签将其引入  </li></ul><p>script标签一旦用于引入外部文件了，就不能再编写代码了，即使编写了浏览器也会忽略  ,如果需要则可以再创建一个新的script标签用于编写内部代码  </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>文件路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  </code></pre><h3 id="1-2-输出语句"><a href="#1-2-输出语句" class="headerlink" title="1.2 输出语句"></a>1.2 输出语句</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"要输出的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>该语句会在浏览器窗口中弹出一个警告框  </p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"要输出的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>该内容将会被写到body标签中，并在页面中显示  </p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"要输出的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>该内容会被写到开发者工具的控制台中  </p><h3 id="1-3-基本的语法"><a href="#1-3-基本的语法" class="headerlink" title="1.3 基本的语法"></a>1.3 基本的语法</h3><ul><li>js函数声明不需要分号，但是赋值语句要加分号  </li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span>arg0<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//函数声明  </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> functionName<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>arg0<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//函数表达式  </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>注意分号<span class="token punctuation">)</span>  </code></pre><ul><li><p>注释  </p><ul><li><p>单行注释  </p><pre class=" language-JavaScript"><code class="language-JavaScript">//注释内容</code></pre></li><li><p>多行注释  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*  注释内容  */</span>  </code></pre></li></ul></li><li><p>JS严格区分大小写      </p><ul><li>JS中每条语句以分号(;)结尾，如果不写分号，浏览器会自动添加，但是会消耗一些系统资源， 而且有些时候，浏览器会加错分号，所以在开发中分号必须写。</li></ul></li><li><p>JS中会自动忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化。  </p></li></ul><h3 id="1-4-字面量和变量"><a href="#1-4-字面量和变量" class="headerlink" title="1.4 字面量和变量"></a>1.4 字面量和变量</h3><h4 id="1-4-1-字面量"><a href="#1-4-1-字面量" class="headerlink" title="1.4.1 字面量"></a>1.4.1 字面量</h4><ul><li><p>字面量实际上就是一些固定的值，比如 1 2 3 4 true false null NaN “hello”<br><strong>字面量都是不可以改变的。</strong>  </p></li><li><p>由于字面量不是很方便使用，所以在JS中很少直接使用字面量  </p></li></ul><h4 id="1-4-2变量"><a href="#1-4-2变量" class="headerlink" title="1.4.2变量"></a>1.4.2变量</h4><ul><li><p>变量可以用来保存字面量，并且可以保存任意的字面量  </p></li><li><p>一般都是通过变量来使用字面量，而不直接使用字面量，而且也可以通过变量来对字面量进行一个描述  </p></li><li><p>声明变量  </p><p>使用var关键字来声明一个变量  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span></code></pre><p>为变量赋值 </p><pre class=" language-javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>声明和赋值同时进行 </p><pre><code>var a = 456;</code></pre></li></ul><h3 id="1-5-标识符"><a href="#1-5-标识符" class="headerlink" title="1.5 标识符"></a>1.5 标识符</h3><ul><li><p>在JS中所有的可以自主命名的内容，都可以认为是一个标识符， 是标识符就应该遵守标识符的规范。</p><ul><li><p>比如：变量名、函数名、属性名  </p></li><li><p>规范：  </p><ul><li><p>标识符中可以含有字母、数字、_、$ </p></li><li><p>标识符不能以数字开头  </p></li><li><p>标识符不能是JS中的关键字和保留字  </p></li><li><p>标识符一般采用驼峰命名法：</p><p>首字母小写，每个单词的开头字母大写，其余字母小写，如：</p><pre><code>helloWorld xxxYyyZzz</code></pre><p>JS底层保存标识符时实际上采用Unicode编码，理论上讲，utf-8中含有的内容都可以作为标识符。</p></li></ul></li></ul></li></ul><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><h3 id="2-1-基本数据类型"><a href="#2-1-基本数据类型" class="headerlink" title="2.1 基本数据类型"></a>2.1 基本数据类型</h3><ul><li><p><strong>JS分为基本数据类型和引用数据类型两种</strong>  </p><ul><li>基本数据类型<ul><li> String 字符串 </li><li>Number 数值</li><li>Boolean 布尔值</li><li>Null 空值</li><li>Undefined 未定义  </li></ul></li><li>引用数据类型<ul><li>Object 对象  </li></ul></li></ul></li><li><p><strong>可以使用typeof运算符检查数据类型</strong>  </p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>基本数据类型的数据，变量是直接保存的它的值。</strong></p><p>变量与变量之间是互相独立的，修改一个变量不会影响其他的变量。  </p></li></ul><h4 id="2-1-1-String-字符串"><a href="#2-1-1-String-字符串" class="headerlink" title="2.1.1 String 字符串"></a>2.1.1 String 字符串</h4><ul><li><p>JS中的<strong>字符串需要使用引号引起来</strong>(双引号或单引号都行)</p></li><li><p>在字符串中使用 \ 作为转义字符  </p><pre class=" language-javascript"><code class="language-javascript">\<span class="token string">'  ==> '</span>  \<span class="token string">"  ==> "</span>  \n  <span class="token operator">==</span><span class="token operator">></span> 换行  \t  <span class="token operator">==</span><span class="token operator">></span> 制表符  \\  <span class="token operator">==</span><span class="token operator">></span> \      </code></pre></li><li><p>使用typeof运算符检查字符串时，会返回”string”      </p></li></ul><h4 id="2-1-2-Number-数值"><a href="#2-1-2-Number-数值" class="headerlink" title="2.1.2 Number 数值"></a>2.1.2 Number 数值</h4><ul><li><p><strong>JS中所有的整数和浮点数都是Number类型</strong>  </p></li><li><p>最大能表示的值：Number.MAX_VALUE = 1.7976931348623157e+308  </p></li><li><p>特殊的数字：能赋值给变量</p><ul><li>Infinity 正无穷 a = Infinity ,能赋值</li><li>-Infinity 负无穷</li><li>NaN 非法数字（Not A Number）</li></ul></li><li><p>其他进制的数字的表示：  </p><ul><li>0b 开头表示二进制，但是不是所有的浏览器都支持  </li><li>0 开头表示八进制  </li><li>0x 开头表示十六进制  </li></ul></li><li><p>可以在parseInt()中传递一个第二个参数，来指定数字的进制</p><pre class=" language-javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>使用typeof检查一个Number类型的数据时，会返回”number” （包括NaN 和 Infinity）  </p></li></ul><h4 id="2-1-3-Boolean-布尔值"><a href="#2-1-3-Boolean-布尔值" class="headerlink" title="2.1.3 Boolean 布尔值"></a>2.1.3 Boolean 布尔值</h4><ul><li>布尔值主要用来进行逻辑判断，布尔值只有两个<ul><li>true 逻辑的真</li><li>false 逻辑的假</li></ul></li><li>使用typeof检查一个布尔值时，会返回”boolean”      </li></ul><h4 id="2-1-4-Null-空值"><a href="#2-1-4-Null-空值" class="headerlink" title="2.1.4 Null 空值"></a>2.1.4 Null 空值</h4><ul><li>空值专门用来表示为空的对象，Null类型的值只有一个：<code>null</code></li><li>使用typeof检查一个Null类型的值时会<strong>返回”object”</strong>  </li></ul><h4 id="2-1-5-Undefined-未定义"><a href="#2-1-5-Undefined-未定义" class="headerlink" title="2.1.5 Undefined 未定义"></a>2.1.5 Undefined 未定义</h4><ul><li><strong>如果声明一个变量但是没有为变量赋值此时变量的值就是undefined</strong>，该类型的值只有一个：<code>undefined</code></li><li>使用typeof检查一个Undefined类型的值时，会返回”undefined”  </li></ul><h3 id="2-2-引用数据类型"><a href="#2-2-引用数据类型" class="headerlink" title="2.2 引用数据类型"></a>2.2 引用数据类型</h3><p> Object 对象  </p><ul><li><p><strong>引用数据类型的数据，变量是保存的对象的引用（内存地址）。</strong></p><p>如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。<br>比较两个变量时，对于基本数据类型，比较的就是值，对于引用数据类型比较的是地址，地址相同才相同        </p></li></ul><h3 id="2-3-类型转换"><a href="#2-3-类型转换" class="headerlink" title="2.3 类型转换"></a>2.3 类型转换</h3><p> 类型转换就是指将其他的数据类型，<strong>转换为String Number 或 Boolean</strong>  </p><h4 id="2-3-1-转换为String"><a href="#2-3-1-转换为String" class="headerlink" title="2.3.1 转换为String"></a>2.3.1 转换为String</h4><h5 id="方式一（强制类型转换）："><a href="#方式一（强制类型转换）：" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h5><p><strong>调用被转换数据的toString()方法</strong></p><p>例子：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：<strong>这个方法不适用于null和undefined</strong> ，由于这两个类型的数据中没有方法，所以调用toString()时会报错  </p><h5 id="方式二（强制类型转换）："><a href="#方式二（强制类型转换）：" class="headerlink" title="方式二（强制类型转换）："></a>方式二（强制类型转换）：</h5><p><strong>调用String()函数</strong></p><p>例子：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p><strong>原理：对于Number Boolean String都会调用他们的toString()方法来将其转换为字符串，对于null值，直接转换为字符串”null”。对于undefined直接转换为字符串”undefined”</strong>  </p><h5 id="方式三（隐式的类型转换）"><a href="#方式三（隐式的类型转换）" class="headerlink" title="方式三（隐式的类型转换）:"></a>方式三（隐式的类型转换）:</h5><p> <strong>为任意的数据类型 +””</strong></p><p>例子：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span> </code></pre><p> 原理：和调用String()函数一样</p><h4 id="2-3-2-转换为Number"><a href="#2-3-2-转换为Number" class="headerlink" title="2.3.2 转换为Number"></a>2.3.2 转换为Number</h4><h5 id="方式一（强制类型转换）：-1"><a href="#方式一（强制类型转换）：-1" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h5><p> <strong>调用Number()函数</strong></p><p>例子： </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p> 转换的情况：  </p><ol><li><p>字符串 &gt; 数字    </p><ul><li>如果字符串是一个合法的数字，则直接转换为对应的数字</li><li>如果字符串是一个非法的数字，则转换为NaN</li><li>如果是一个空串或纯空格的字符串，则转换为0  </li></ul></li><li><p>布尔值 &gt; 数字     </p><ul><li>true转换为1</li><li>false转换为0  </li></ul></li><li><p>空值 &gt; 数字     </p><p>null转换为0  </p></li><li><p>未定义 &gt; 数字    </p><p>undefined 转换为NaN  </p></li></ol><h5 id="方式二（强制类型转换）：-1"><a href="#方式二（强制类型转换）：-1" class="headerlink" title="方式二（强制类型转换）："></a>方式二（强制类型转换）：</h5><p><strong>调用parseInt()或parseFloat()</strong></p><p>这两个函数专门用来将一个字符串转换为数字</p><ul><li><p>对非String使用parseInt()或parseFloat()，它会<strong>先将其转换为String</strong>然后在操作 parseInt()，可以将<strong>一个字符串中的有效的整数位</strong>提取出来，并转换为Number  </p><p>例子：</p><pre class=" language-JavaScript"><code class="language-JavaScript">var a = "123.456px";  a = parseInt(a); //123  </code></pre></li><li><p>如果需要可以在parseInt()中指定一个第二个参数，来指定进制parseFloat()可以将一个<strong>字符串中的有效的小数位</strong>提取出来，并转换为Number  </p><p>例子：</p><pre class=" language-JavaScript"><code class="language-JavaScript">var a = "123.456px";  a = parseFloat(a); //123.456  </code></pre></li></ul><h5 id="方式三（隐式的类型转换）："><a href="#方式三（隐式的类型转换）：" class="headerlink" title="方式三（隐式的类型转换）："></a>方式三（隐式的类型转换）：</h5><p><strong>使用一元的+来进行隐式的类型转换</strong>  </p><p>例子：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token operator">+</span>a<span class="token punctuation">;</span>  </code></pre><p> <strong>原理：和Number()函数一样</strong>  </p><h4 id="2-3-3转换为布尔值"><a href="#2-3-3转换为布尔值" class="headerlink" title="2.3.3转换为布尔值"></a>2.3.3转换为布尔值</h4><h5 id="方式一（强制类型转换）：-2"><a href="#方式一（强制类型转换）：-2" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h5><p> <strong>使用Boolean()函数</strong></p><p>例子：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span></code></pre><p>转换的情况 </p><ul><li><p>字符串 &gt; 布尔 </p><p>除了空串其余全是true</p></li><li><p>数值 &gt; 布尔</p><p>除了0和NaN其余的全是true</p></li><li><p>null、undefined &gt; 布尔</p><p>都是false</p></li><li><p>对象 &gt; 布尔</p><p>都是true  </p></li></ul><h5 id="方式二（隐式类型转换）："><a href="#方式二（隐式类型转换）：" class="headerlink" title="方式二（隐式类型转换）："></a>方式二（隐式类型转换）：</h5><p> <strong>为任意的数据类型做两次非运算，即可将其转换为布尔值</strong>  </p><p>例子：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true  </span></code></pre><h2 id="三、基础语法"><a href="#三、基础语法" class="headerlink" title="三、基础语法"></a>三、基础语法</h2><h3 id="3-1-运算符"><a href="#3-1-运算符" class="headerlink" title="3.1 运算符"></a>3.1 运算符</h3><p> 运算符也称为操作符，通过运算符可以对一个或多个值进行运算或操作  </p><h4 id="3-1-1-typeof运算符"><a href="#3-1-1-typeof运算符" class="headerlink" title="3.1.1 typeof运算符"></a>3.1.1 typeof运算符</h4><ul><li><p>用来检查一个变量的数据类型</p></li><li><p>语法：typeof 变量</p></li><li><p>它会返回一个用于描述类型的字符串作为结果  </p></li></ul><h4 id="3-1-2-算数运算符"><a href="#3-1-2-算数运算符" class="headerlink" title="3.1.2 算数运算符"></a>3.1.2 算数运算符</h4><ul><li><p>+&ensp;对两个值进行加法运算并返回结果</p></li><li><p>-&ensp;对两个值进行减法运算并返回结果</p></li><li><p>*&ensp;对两个值进行乘法运算并返回结果</p></li><li><p>/&ensp;对两个值进行除法运算并返回结果</p></li><li><p>%&ensp;对两个值进行取余运算并返回结果  </p></li><li><p><em>除了加法以外，对非Number类型的值进行运算时，都会先转换为Number然后在做运算。</em>*<br>而做加法运算时，如果是两个字符串进行相加，则会做拼串操作，将两个字符连接为一个字符串。<br>任何值和字符串做加法，都会先转换为字符串，然后再拼串。</p></li></ul><h4 id="3-1-3-一元运算符"><a href="#3-1-3-一元运算符" class="headerlink" title="3.1.3 一元运算符"></a>3.1.3 一元运算符</h4><p> 一元运算符只需要一个操作数  </p><h5 id="一元的"><a href="#一元的" class="headerlink" title="一元的 +"></a>一元的 +</h5><p>就是正号，不会对值产生任何影响，但是可以将一个非数字转换为数字  </p><p>例子：    </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token operator">+</span>a<span class="token punctuation">;</span>  </code></pre><h5 id="一元的-1"><a href="#一元的-1" class="headerlink" title="一元的 -"></a>一元的 -</h5><p>就是负号，可以对一个数字进行符号位取反</p><p>例子：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> a<span class="token punctuation">;</span>  </code></pre><h5 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h5><p>自增可以使变量在原值的基础上自增1<br>自增可以使用 前++（++a）后++(a++)<br>无论是++a 还是 a++都会立即使原变量自增1<br>不同的是++a和a++的值是不同的：</p><ul><li>++a的值是变量的新值（自增后的值）</li><li>a++的值是变量的原值（自增前的值）  </li></ul><h5 id="自减"><a href="#自减" class="headerlink" title="自减"></a>自减</h5><p>自减可以使变量在原值的基础上自减1<br>自减使用<br>自减可以使用 前（a）后(a)<br>无论是a 还是 a都会立即使原变量自减1<br>不同的是a和a的值是不同的  </p><ul><li>–a的值是变量的新值（自减后的值）</li><li>a–的值是变量的原值（自减前的值）  </li></ul><h4 id="3-1-4逻辑运算符"><a href="#3-1-4逻辑运算符" class="headerlink" title="3.1.4逻辑运算符"></a>3.1.4逻辑运算符</h4><p>!<br>    非运算可以对一个布尔值进行取反，true变false false边true<br>    当对非布尔值使用!时，会先将其转换为布尔值然后再取反<br>    <strong>我们可以利用!来将其他的数据类型转换为布尔值</strong>  </p><p>&amp;&amp;<br>    &amp;&amp;可以对符号两侧的值进行与运算<br>    只有两端的值都为true时，才会返回true。只要有一个false就会返回false。<br>    与是一个短路的与，<strong>如果第一个值是false，则不再检查第二个值</strong><br>    对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<br>    规则：<br>            <strong>1.如果第一个值为false，则返回第一个值<br>            2.如果第一个值为true，则返回第二个值</strong>  </p><p>||<br>    ||可以对符号两侧的值进行或运算<br>    只有两端都是false时，才会返回false。只要有一个true，就会返回true。<br>    或是一个短路的或，<strong>如果第一个值是true，则不再检查第二个值</strong><br>    对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<br>    规则：<br>            <strong>1.如果第一个值为true，则返回第一个值<br>            2.如果第一个值为false，则返回第二个值</strong>  </p><h4 id="3-1-5-赋值运算符"><a href="#3-1-5-赋值运算符" class="headerlink" title="3.1.5 赋值运算符"></a>3.1.5 赋值运算符</h4><ul><li><p>=    </p><p>可以将符号右侧的值赋值给左侧变量    </p></li><li><p>+=      </p><pre class=" language-javascript"><code class="language-javascript">a <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span> 相当于 a <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">5</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span></code></pre></li><li><p>-=    </p><pre class=" language-javascript"><code class="language-javascript">a <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">5</span>  相当于 a <span class="token operator">=</span> a<span class="token number">-5</span></code></pre></li><li><p>*=    </p><pre class=" language-javascript"><code class="language-javascript">a <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">5</span> 相当于 a <span class="token operator">=</span> a<span class="token operator">*</span><span class="token number">5</span></code></pre></li><li><p>/=    </p><pre class=" language-javascript"><code class="language-javascript">a <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">5</span> 相当于 a <span class="token operator">=</span> a<span class="token operator">/</span><span class="token number">5</span></code></pre></li><li><p>%=  </p><pre class=" language-javascript"><code class="language-javascript">a <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">5</span> 相当于 a <span class="token operator">=</span> a<span class="token operator">%</span><span class="token number">5</span></code></pre></li></ul><h4 id="3-1-6-关系运算符"><a href="#3-1-6-关系运算符" class="headerlink" title="3.1.6 关系运算符"></a>3.1.6 关系运算符</h4><ul><li>关系运算符用来比较两个值之间的大小关系的  <pre><code>&gt;  &gt;=  &lt;  &lt;=  </code></pre></li><li>关系运算符的规则和数学中一致，用来比较两个值之间的关系，<br>如果关系成立则返回true，关系不成立则返回false。<br>如果比较的两个值是非数值，会将其转换为Number然后再比较。<br>如果比较的两个值都是字符串，此时会比较字符串的Unicode编码，而不会转换为Number。  </li></ul><h4 id="3-1-7-相等运算符"><a href="#3-1-7-相等运算符" class="headerlink" title="3.1.7 相等运算符"></a>3.1.7 相等运算符</h4><p><strong>==</strong><br><strong>相等</strong>，判断左右两个值是否相等，如果相等返回true，如果不等返回false<br>相等会自动对两个值进行类型转换，如果<strong>对不同的类型进行比较，会将其转换为相同的类型然后再比较</strong>，转换后相等它也会返回true，null == undifined  </p><p>!=<br>     不等，判断左右两个值是否不等，如果不等则返回true，如果相等则返回false<br>     不等也会做自动的类型转换。<br><strong>===</strong><br>     <strong>全等</strong>，判断左右两个值是否全等，它和相等类似，只不过它不会进行自动的类型转换，<br>        如果两个值的类型不同，则直接返回false  </p><p>!==<br>     <strong>不全等</strong>，和不等类似，但是它不会进行自动的类型转换，如果两个值的类型不同，它会直接返回true</p><p>特殊的值：<br>     null和undefined<br>         由于undefined衍生自null，所以<strong>null == undefined</strong> 会返回true。<br>            但是 null === undefined 会返回false。<br><strong>NaN</strong><br>    NaN不与任何值相等，报告它自身 NaN == NaN //false<br>    判断一个值是否是NaN<br>        使用isNaN()函数  </p><h4 id="3-1-8-三元运算符："><a href="#3-1-8-三元运算符：" class="headerlink" title="3.1.8 三元运算符："></a>3.1.8 三元运算符：</h4><p>?:  </p><ul><li>语法：条件表达式?语句1:语句2;  </li><li>执行流程：  <pre><code>先对条件表达式求值判断，      如果判断结果为true，则执行语句1，并返回执行结果      如果判断结果为false，则执行语句2，并返回执行结果        </code></pre></li><li>优先级：<br>和数学中一样，JS中的运算符也是具有优先级的，比如 先乘除 后加减 先与后或<br>具体的优先级可以参考优先级的表格，在表格中越靠上的优先级越高，<br>优先级越高的越优先计算，优先级相同的，从左往右计算。<br>优先级不需要记忆，如果遇到拿不准的，使用()来改变优先级。  </li></ul><h3 id="3-2-流程控制语句"><a href="#3-2-流程控制语句" class="headerlink" title="3.2 流程控制语句"></a>3.2 流程控制语句</h3><p>程序都是<strong>自上向下</strong>的顺序执行的，通过流程控制语句可以改变程序执行的顺序，或者反复的执行某一段的程序。  </p><h4 id="3-2-1-条件分支语句"><a href="#3-2-1-条件分支语句" class="headerlink" title="3.2.1 条件分支语句"></a>3.2.1 条件分支语句</h4><h5 id="条件判断语句也称为if语句"><a href="#条件判断语句也称为if语句" class="headerlink" title="条件判断语句也称为if语句"></a>条件判断语句也称为if语句</h5><ul><li><p>语法一：  </p><pre class=" language-JavaScript"><code class="language-JavaScript">if(条件表达式)&#123;      语句...  &#125;  </code></pre><ul><li>执行流程：<br> if语句执行时，会先对条件表达式进行求值判断，<br> 如果值为true，则执行if后的语句<br> 如果值为false，则不执行  </li></ul></li><li><p>语法二：  </p><pre class=" language-JavaScript"><code class="language-JavaScript">if(条件表达式)&#123;      语句...  &#125;else&#123;      语句...  &#125; </code></pre><ul><li><p>执行流程：</p><p>if…else语句执行时，会对条件表达式进行求值判断，  </p><pre><code>如果值为true，则执行if后的语句  如果值为false，则执行else后的语句  </code></pre></li></ul></li><li><p>语法三：  </p><pre class=" language-JavaScript"><code class="language-JavaScript">if(条件表达式)&#123;      语句...  &#125;else if(条件表达式)&#123;      语句...  &#125;else if(条件表达式)&#123;      语句...  &#125;else if(条件表达式)&#123;      语句...  &#125;else&#123;      语句...  &#125;     </code></pre><ul><li><p>执行流程</p><p>if…else if…else语句执行时，会自上至下依次对条件表达式进行求值判断，  </p><pre><code>如果判断结果为true，则执行当前if后的语句，执行完成后语句结束。  如果判断结果为false，则继续向下判断，直到找到为true的为止。  如果所有的条件表达式都是false，则执行else后的语句。</code></pre></li></ul></li></ul><h5 id="条件分支语句也称switch语句"><a href="#条件分支语句也称switch语句" class="headerlink" title="条件分支语句也称switch语句"></a>条件分支语句也称switch语句</h5><ul><li>语法:  </li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> 表达式<span class="token punctuation">:</span>          语句<span class="token operator">...</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> 表达式<span class="token punctuation">:</span>          语句<span class="token operator">...</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> 表达式<span class="token punctuation">:</span>          语句<span class="token operator">...</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>          语句<span class="token operator">...</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><ul><li><p>执行流程：</p><p>switch…case…语句在执行时，会依次将case后的表达式的值和switch后的表达式的值进行全等比较，  </p><pre><code>如果比较结果为false，则继续向下比较。如果比较结果为true，则从当前case处开始向下执行代码。  如果所有的case判断结果都为false，则从default处开始执行代码。  </code></pre></li></ul><h4 id="3-2-2-循环语句"><a href="#3-2-2-循环语句" class="headerlink" title="3.2.2 循环语句"></a>3.2.2 循环语句</h4><p>通过循环语句可以反复执行某些语句多次  </p><ul><li><p>while循环  </p><ul><li>语法：  </li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">while(条件表达式)&#123;      语句...  &#125;  </code></pre><ul><li>执行流程：  <pre><code>while语句在执行时，会先对条件表达式进行求值判断，      如果判断结果为false，则终止循环      如果判断结果为true，则执行循环体      循环体执行完毕，继续对条件表达式进行求值判断，依此类推</code></pre></li></ul></li><li><p>do…while循环  </p><ul><li>语法:  </li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  语句<span class="token operator">...</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span>  </code></pre><ul><li><p>执行流程：  </p><pre><code>do...while在执行时，会先执行do后的循环体，然后在对条件表达式进行判断，          如果判断判断结果为false，则终止循环。          如果判断结果为true，则继续执行循环体，依此类推  </code></pre></li><li><p>和while的区别：  </p><pre><code>while：先判断后执行      do...while: 先执行后判断       do...while可以确保循环体至少执行一次。</code></pre></li><li><p>for循环</p><ul><li>语法：  </li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>①初始化表达式 <span class="token punctuation">;</span> ②条件表达式 <span class="token punctuation">;</span> ④更新表达式<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      ③语句<span class="token operator">...</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><ul><li>执行流程：  <pre><code>首先执行①初始化表达式，初始化一个变量，  然后对②条件表达式进行求值判断，如果为false则终止循环  如果判断结果为true，则执行③循环体  循环体执行完毕，执行④更新表达式，对变量进行更新。  更新表达式执行完毕重复②    </code></pre></li></ul></li><li><p>死循环  </p><pre><code>while(true)&#123;  &#125;  for(;;)&#123;  &#125;</code></pre></li></ul><h2 id="四、对象（Object）"><a href="#四、对象（Object）" class="headerlink" title="四、对象（Object）"></a>四、对象（Object）</h2><p>对象是JS中的引用数据类型  </p><p><strong>对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性</strong>  </p><p>使用typeof检查一个对象时，会返回object  </p><h3 id="4-1-对象的分类："><a href="#4-1-对象的分类：" class="headerlink" title="4.1 对象的分类："></a>4.1 对象的分类：</h3><p>1.内建对象<br>    - 由ES标准中定义的对象，在任何的ES的实现中都可以使用<br>    - 比如：Math String Number Boolean Function Object….  </p><p>2.宿主对象<br>    - 由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象<br>    - 比如 BOM DOM  </p><p>3.自定义对象  </p><pre><code>- 由开发人员自己创建的对象  </code></pre><ul><li><p>创建对象  </p><p>方式一：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>方式二：</p><pre class=" language-JavaScript"><code class="language-JavaScript">var obj = &#123;&#125;; </code></pre></li><li><p><strong>向对象中添加属性</strong></p><p>语法：  </p><pre><code>对象.属性名 = 属性值;  **对象[&quot;属性名&quot;] = 属性值;**    //这种方式能够使用特殊的属性名  </code></pre></li><li><p><em>对象的属性名没有任何要求，不需要遵守标识符的规范，但是在开发中，尽量按照标识符的要求去写。</em>*<br>属性值也可以任意的数据类型。  </p></li><li><p>读取对象中的属性</p><p>语法：  </p><pre><code>对象.属性名  对象[&quot;属性名&quot;] //&quot;属性名&quot;可以使字符串常量，也可以是字符串变量  </code></pre><p> 如果读取一个对象中没有的属性，它不会报错，而是返回一个undefined  </p></li><li><p><strong>删除对象中的属性</strong></p><p>语法：  </p><pre><code>delete 对象.属性名  delete 对象[&quot;属性名&quot;]  </code></pre></li></ul><h3 id="4-2-遍历"><a href="#4-2-遍历" class="headerlink" title="4.2 遍历"></a>4.2 遍历</h3><ul><li><p><strong>使用in检查对象中是否含有指定属性</strong><br> 语法：”属性名” in 对象<br> 如果在对象中含有该属性，则返回true ，如果没有则返回false  </p><p>循环遍历对象自身的和继承的可枚举属性(不含Symbol属性).  </p><pre><code>var obj = &#123;&#39;0&#39;:&#39;a&#39;,&#39;1&#39;:&#39;b&#39;,&#39;2&#39;:&#39;c&#39;&#125;;    for(var i in obj) &#123;       console.log(i,&quot;:&quot;,obj[i]);  &#125;  </code></pre></li><li><p><strong>使用对象字面量，在创建对象时直接向对象中添加属性</strong><br>语法： </p><pre><code>var obj = &#123;      属性名:属性值,      属性名:属性值,      属性名:属性值,      属性名:属性值  &#125; </code></pre></li></ul><h3 id="4-3-函数（Function）"><a href="#4-3-函数（Function）" class="headerlink" title="4.3 函数（Function）"></a>4.3 函数（Function）</h3><ul><li><p><strong>函数也是一个对象，也具有普通对象的功能（能有属性）</strong>  </p><p>函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码<br>使用typeof检查一个函数时会返回function<br>创建函数  </p><ul><li><p>函数声明 </p><pre><code>function 函数名([形参1,形参2...形参N])&#123;  语句...  &#125;  </code></pre></li><li><p>函数表达式</p><pre><code>var 函数名 = function([形参1,形参2...形参N])&#123;  语句...  &#125;;  </code></pre></li><li><p>调用函数<br> 语法：函数对象([实参1,实参2…实参N]);  </p><pre><code>  fun() sum() alert() Number() parseInt()  </code></pre><p> 当我们调用函数时，函数中封装的代码会按照编写的顺序执行  </p></li></ul></li><li><p><strong>立即执行函数</strong><br>函数定义完，立即被调用，这种函数叫做立即执行函数<br>立即执行函数往往只会执行一次</p><pre><code>(function(a,b)&#123;      console.log(&quot;a = &quot;+a);      console.log(&quot;b = &quot;+b);  &#125;)(123,456); </code></pre><ul><li><p>遍历对象  </p><pre><code>for(var v in obj)&#123;      document.write(&quot;property：name =&quot;+v+&quot;value=&quot;+obj[v]+&quot;&lt;br/&gt;&quot; );  &#125;  </code></pre></li><li><p>形参和实参  </p><ul><li><p>形参：形式参数</p><p>定义函数时，可以在()中定义一个或多个形参，形参之间使用,隔开<br>定义形参就相当于在函数内声明了对应的变量但是并不赋值，<br>形参会在调用时才赋值。</p></li><li><p>实参：实际参数</p><p>调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参,<br>调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值。<br><strong>如果实参的数量大于形参，多余实参将不会赋值，</strong><br><strong>如果实参的数量小于形参，则没有对应实参的形参将会赋值undefined</strong>  </p></li></ul></li></ul></li><li><p><strong>返回值，就是函数执行的结果。</strong></p><p>使用return 来设置函数的返回值。<br>语法：return 值;  </p><pre><code> 该值就会成为函数的返回值，可以通过一个变量来接收返回值   return后边的代码都不会执行，一旦执行到return语句时，函数将会立刻退出。   return后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象。  </code></pre><p><strong>如果return后不跟值，或者是不写return则函数默认返回undefined。</strong>  </p></li><li><p>break、continue和return<br> break  </p><pre><code> 退出循环  </code></pre><p> continue  </p><pre><code> 跳过当次循环  </code></pre><p> return  </p><pre><code> 退出函数</code></pre></li><li><p><strong>参数，函数的实参也可以是任意的数据类型。</strong>  </p><ul><li><p><strong>方法（method）</strong></p><p>可以将一个函数设置为一个对象的属性，当一个对象的属性是一个函数时，\我们称这个函数是该对象的方法。<br>对象.方法名();<br>函数名()  </p></li></ul></li></ul><h3 id="4-4-函数的属性和方法"><a href="#4-4-函数的属性和方法" class="headerlink" title="4.4 函数的属性和方法"></a>4.4 函数的属性和方法</h3><p>call()<br>apply()<br> <strong>这两个方法都是函数对象的方法需要通过函数对象来调用</strong><br> 通过两个方法可以直接调用函数，并且<strong>可以通过第一个实参来指定函数中this</strong><br> 不同的是call是直接传递函数的实参而apply需要将实参封装到一个数组中传递<br><strong>arguments</strong><br> arguments和this类似，都是函数中的隐含的参数<br> arguments是一个类数组元素，它用来封装函数执行过程中的实参<br>    所以即使不定义形参，也可以通过arguments来使用实参<br> <strong>arguments中有一个属性callee表示当前执行的函数对象</strong>  </p><p>this（调用函数的那个对象）<br> this是函数的上下文对象，根据函数的调用方式不同会执向不同的对象<br>    1.以函数的形式调用时，this是window<br>    2.以方法的形式调用时，this是调用方法的对象<br>    3.以构造函数的形式调用时，this是新建的那个对象<br>    4.使用call和apply调用时，this是指定的那个对象<br>    5.在全局作用域中this代表window  </p><h3 id="4-5-作用域"><a href="#4-5-作用域" class="headerlink" title="4.5 作用域"></a>4.5 作用域</h3><p>作用域简单来说就是一个变量的作用范围。  在JS中作用域分成两种：  </p><ul><li><p>全局作用域  </p><ul><li>直接在script标签中编写的代码都运行在全局作用域中 </li><li> <strong>全局作用域在打开页面时创建，在页面关闭时销毁。</strong>  </li><li>全局作用域中有一个全局对象window，window对象由浏览器提供，可以在页面中直接使用，它代表的是整个的浏览器的窗口。  </li><li><strong>在全局作用域中创建的变量都会作为window对象的属性保存</strong><br><strong>在全局作用域中创建的函数都会作为window对象的方法保存</strong>  </li><li>在全局作用域中创建的变量和函数可以在页面的任意位置访问。在函数作用域中也可以访问到全局作用域的变量。  </li><li>尽量不要在全局中创建变量      </li></ul></li><li><p>函数作用域  </p><ul><li>函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。</li><li>函数作用域在函数执行时创建，在函数执行结束时销毁。</li><li>在函数作用域中创建的变量，不能在全局中访问。  </li><li>当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有则直接使用，<br>如果没有则向上一级作用域中寻找，直到找到全局作用域<br>如果全局作用域中仍然没有找到，则会报错ReferenceError</li><li>在函数中要访问全局变量可以使用window对象</li></ul></li><li><p><strong>变量的声明提前</strong>  </p><p>在全局作用域中，使用<strong>var关键字声明的变量会在所有的代码执行之前被声明，但是不会赋值。</strong>  </p><pre><code>    所以我们可以在变量声明前使用变量。但是不使用var关键字声明的变量不会被声明提前。  </code></pre><p>在函数作用域中，也具有该特性，使用var关键字声明的变量会在函数所有的代码执行前被声明，  </p><pre><code>    如果没有使用var关键字声明变量，则变量会变成全局变量</code></pre></li><li><p><strong>函数的声明提前</strong></p><p>在全局作用域中，使用<strong>函数声明创建的函数（function fun(){}）,会在所有的代码执行之前被创建</strong>，  </p><pre><code>    也就是我们可以在函数声明前去调用函数，但是使用函数表达式(var fun = function()&#123;&#125;)创建的函数没有该特性   在函数作用域中，使用函数声明创建的函数，会在所有的函数中的代码执行之前就被创建好了。  </code></pre></li></ul><h3 id="4-6-this（上下文对象）"><a href="#4-6-this（上下文对象）" class="headerlink" title="4.6 this（上下文对象）"></a>4.6 this（上下文对象）</h3><p>我们每次调用函数时，解析器都会将一个上下文对象作为隐含的参数传递进函数。<br>使用this来引用上下文对象，根据函数的调用形式不同，this的值也不同。  </p><ul><li>this的不同的情况：  <ul><li>以函数的形式调用时，this是window  </li><li>以方法的形式调用时，this就是调用方法的对象 </li><li>以构造函数的形式调用时，this就是新创建的对象  </li></ul></li></ul><h3 id="4-7-构造函数"><a href="#4-7-构造函数" class="headerlink" title="4.7 构造函数"></a>4.7 构造函数</h3><p>构造函数是专门用来创建对象的函数  ，<strong>一个构造函数我们也可以称为一个类</strong> ，通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例 。通过同一个构造函数创建的对象，我们称为一类对象。<br>构造函数就是一个普通的函数，只是他的调用方式不同：</p><ul><li>如果直接调用，它就是一个普通函数  </li><li>如果使用new来调用，则它就是一个构造函数  </li></ul><p>例子：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name <span class="token punctuation">,</span> age <span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><ul><li><p>构造函数的执行流程：</p><p>1.创建一个新的对象<br>2.将新的对象作为函数的上下文对象（this）<br>3.执行函数中的代码<br>4.将新建的对象返回  </p></li><li><p><strong>instanceof 用来检查一个对象是否是一个类的实例</strong>  </p><p>语法：对象 instanceof 构造函数</p><p>​    如果该对象时构造函数的实例，则返回true，否则返回false<br>​    <strong>Object是所有对象的祖先，所以任何对象和Object做instanceof都会返回true</strong>  </p></li><li><p>枚举对象中的属性  </p><p>for…in<br>语法：        </p><pre><code>for(var 属性名 in 对象)&#123;    &#125;  </code></pre><p>for…in语句的循环体会执行多次，对象中有几个属性就会执行几次，每次讲一个属性名赋值给我们定义的变量，我们可以通过它来获取对象中的属性。</p></li></ul><h3 id="4-8-原型（prototype）"><a href="#4-8-原型（prototype）" class="headerlink" title="4.8 原型（prototype）"></a>4.8 原型（prototype）</h3><ul><li><p>原型：</p><p>创建一个函数以后，<strong>解析器都会默认在函数中添加一个数prototype</strong><br>prototype属性指向的是一个对象，这个对象我们称为原型对象。<br> 当函数作为构造函数使用，<strong>它所创建的对象中都会有一个隐含的属性执行该原型对象。</strong>  </p><pre class=" language-javascript"><code class="language-javascript">这个隐含的属性可以通过对象<span class="token punctuation">.</span>__proto__来访问。  </code></pre><p><strong>原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。</strong>我们可以将对象中共有的属性和方法统一添加到原型对象中，这样我们只需要添加一次，就可以使所有的对象都可以使用。</p></li><li><p>原型链</p><p>当我们去访问对象的一个属性或调用对象的一个方法时，它会先在自身中寻找，如果在自身中找到了，则直接使用。<br>如果没有找到，则去原型对象中寻找，如果找到了则使用；<strong>如果没有找到，则去原型的原型中寻找。</strong><br>依此类推。直到找到Object的原型为止，Object的原型的原型为null，如果依然没有找到则返回undefined</p></li><li><p><strong>hasOwnProperty()</strong><br>这个方法可以用来检查<strong>对象自身中</strong>是否含有某个属性</p><p>语法：对象.hasOwnProperty(“属性名”)  </p></li></ul><h3 id="4-9-toString方法"><a href="#4-9-toString方法" class="headerlink" title="4.9 toString方法"></a>4.9 toString方法</h3><p>当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值  </p><p>如果我们希望在输出对象时不输出[object Object]，可以为对象添加一个toString()方法      </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//修改Person原型的toString  </span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"Person[name="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">",gender="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  </code></pre><h3 id="4-10-垃圾回收（GC）"><a href="#4-10-垃圾回收（GC）" class="headerlink" title="4.10 垃圾回收（GC）"></a>4.10 垃圾回收（GC）</h3><p>就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾。<br>这些垃圾积攒过多以后，会导致程序运行的速度过慢，所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾。<br>当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾。这种对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理。<br>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁。<br>我们不需要也不能进行垃圾回收的操作，我们需要做的只是要将不再使用的对象设置null即可。</p><h2 id="五、数组（Array）"><a href="#五、数组（Array）" class="headerlink" title="五、数组（Array）"></a>五、数组（Array）</h2><p>数组也是一个对象，是一个用来存储数据的对象和Object类似，但是它的存储效率比普通对象要高。<br>数组中保存的内容我们称为元素<br>数组使用索引（index）来操作元素<br>索引指由0开始的整数  </p><h3 id="5-1-数组的操作："><a href="#5-1-数组的操作：" class="headerlink" title="5.1 数组的操作："></a>5.1 数组的操作：</h3><ul><li><p>创建数组  </p><pre><code>var arr = new Array();  var arr = [];  </code></pre></li><li><p>向数组中添加元素<br>语法：<br>数组对象[索引] = 值;  </p><pre><code>arr[0] = 123;  arr[1] = &quot;hello&quot;;  </code></pre></li><li><p>创建数组时直接添加元素</p><p>语法：  </p><pre><code>var arr = [元素1,元素2....元素N]; </code></pre><p>例子：</p><pre><code>var arr = [123,&quot;hello&quot;,true,null];  </code></pre></li><li><p>获取和修改数组的长度，使用length属性来操作数组的长度</p><ul><li><p>获取长度：</p><p>数组.length  </p><pre><code>     length获取到的是数组的最大索引+1       对于连续的数组，length获取到的就是数组中元素的个数  </code></pre></li><li><p>修改数组的长度：</p><p>数组.length = 新长度  </p><pre><code>         如果修改后的length大于原长度，则多出的部分会空出来           如果修改后的length小于原长度，则原数组中多出的元素会被删除  </code></pre></li><li><p>向数组的最后添加元素：</p><p>数组[数组.length] = 值; </p></li></ul></li></ul><h3 id="5-2-数组的方法"><a href="#5-2-数组的方法" class="headerlink" title="5.2 数组的方法"></a>5.2 数组的方法</h3><table><thead><tr><th>functionName</th><th>function</th><th>usage</th></tr></thead><tbody><tr><td>push()</td><td>用来向数组的末尾添加一个或多个元素，并返回数组新的长度</td><td>语法：数组.push(元素1,元素2,元素N)</td></tr><tr><td>pop()</td><td>用来删除数组的最后一个元素，并返回被删除的元素</td><td></td></tr><tr><td>unshift()</td><td>向数组的开头添加一个或多个元素，并返回数组的新的长度</td><td></td></tr><tr><td>shift()</td><td>删除数组的开头的一个元素，并返回被删除的元素</td><td></td></tr><tr><td>reverse()</td><td>可以用来反转一个数组，它会对原数组产生影响</td><td></td></tr><tr><td>concat()</td><td>可以连接两个或多个数组，它不会影响原数组，而是新数组作为返回值返回</td><td></td></tr></tbody></table><ul><li><p>slice(sart,[end])  </p><p> 可以从一个数组中截取指定的元素<br> 该方法不会影响原数组，而是将截取到的内容封装为一个新的数组并返回<br> 参数：  </p><pre><code>  1.截取开始位置的索引（包括开始位置）    2.截取结束位置的索引（不包括结束位置）         第二个参数可以省略不写，如果不写则一直截取到最后     参数可以传递一个负值，如果是负值，则从后往前数  </code></pre></li><li><p>splice()  </p><p> 可以用来删除数组中指定元素，并使用新的元素替换  </p><pre><code>  该方法会将删除的元素封装到新数组中返回  </code></pre><p> 参数：  </p><pre><code>  1.删除开始位置的索引    2.删除的个数    3.三个以后，都是替换的元素，这些元素将会插入到开始位置索引的前边  </code></pre></li><li><p>join([splitor])  </p><p> 可以将一个数组转换为一个字符串<br> 参数：  </p><pre><code>  需要一个字符串作为参数，这个字符串将会作为连接符来连接数组中的元素    如果不指定连接符则默认使用</code></pre></li><li><p>sort()  </p><p>可以对一个数组中的内容进行排序，默认是按照Unicode编码进行排序  </p><pre><code>调用以后，会直接修改原数组。  </code></pre><p>可以自己指定排序的规则，需要一个回调函数作为参数：  </p><p>我们可以自己来指定排序的规则<br>我们可以在sort()添加一个回调函数，来指定排序规则，  </p><pre><code>回调函数中需要定义两个形参,  浏览器将会分别使用数组中的元素作为实参去调用回调函数  使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边  </code></pre><ul><li><p>浏览器会根据回调函数的返回值来决定元素的顺序，<br>如果返回一个大于0的值，则元素会交换位置<br>如果返回一个小于0的值，则元素位置不变<br>如果返回一个0，则认为两个元素相等，也不交换位置  </p></li><li><p>如果需要升序排列，则返回 a-b<br>如果需要降序排列，则返回b-a  </p><pre><code>function(a,b)&#123;      //升序排列      //return a-b;            //降序排列      return b-a;  &#125;  </code></pre></li></ul></li></ul><h3 id="5-3-遍历数组"><a href="#5-3-遍历数组" class="headerlink" title="5.3 遍历数组"></a>5.3 遍历数组</h3><ul><li>遍历数组就是将数组中元素都获取到，一般情况我们都是使用for循环来遍历数组</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>数组<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//数组[i]  </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>使用forEach()方法来遍历数组（不兼容IE8）  </li></ul><pre class=" language-javascript"><code class="language-javascript">数组<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value <span class="token punctuation">,</span> index <span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>forEach()方法需要一个回调函数作为参数，数组中有几个元素，回调函数就会被调用几次，每次调用时，都会将遍历到的信息以实参的形式传递进来，我们可以定义形参来获取这些信息。</p><ul><li><p>value:正在遍历的元素  </p></li><li><p>index:正在遍历元素的索引  </p></li><li><p>obj:被遍历对象    </p></li></ul><h2 id="六、常用类和方法"><a href="#六、常用类和方法" class="headerlink" title="六、常用类和方法"></a>六、常用类和方法</h2><h3 id="6-1-包装类"><a href="#6-1-包装类" class="headerlink" title="6.1 包装类"></a>6.1 包装类</h3><p>在JS中为我们提供了<strong>三个包装类：</strong>  </p><ul><li>String()</li><li>Boolean()</li><li>Number()</li></ul><p>通过这三个包装类可以创建基本数据类型的对象<br>例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> bool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><strong>但是在实际应用中千万不要这么干。</strong>  </p><p>当我们去操作一个基本数据类型的属性和方法时，<strong>解析器会临时将其转换为对应的包装类，然后再去操作属性和方法，</strong>操作完成以后再将这个临时对象进行销毁。  </p><h3 id="6-2-Date"><a href="#6-2-Date" class="headerlink" title="6.2 Date"></a>6.2 Date</h3><p>日期的对象，在JS中通过Date对象来表示一个时间</p><p>创建对象</p><ul><li>创建一个当前的时间对象  </li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><ul><li>创建一个指定的时间对象  </li></ul><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"月/日/年 时:分:秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><ul><li>方法：  </li></ul><table><thead><tr><th>name</th><th></th></tr></thead><tbody><tr><td>getDate()</td><td>当前日期对象是几日（1-31）</td></tr><tr><td>getDay()</td><td>返回当前日期对象时周几（0-6） 0 周日、 1 周一……</td></tr><tr><td>getMonth()</td><td>返回当前日期对象的月份（0-11） 0 一月、 1 二月 ……</td></tr><tr><td>getFullYear()</td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td>getHours()</td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td>getMinutes()</td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td>getSeconds()</td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td>getMilliseconds()</td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td>getTime()</td><td>返回当前日期对象的时间戳<br/>     时间戳，指的是从1970年月1日 0时0分0秒，<strong>到现在时间的毫秒数</strong><br/>        计算机底层保存时间都是以时间戳的形式保存的。</td></tr><tr><td>Date.now()</td><td>可以获取当前代码执行时的时间戳</td></tr></tbody></table><h3 id="6-3-Math"><a href="#6-3-Math" class="headerlink" title="6.3 Math"></a>6.3 Math</h3><p>Math属于一个工具类，它不需要我们创建对象，它里边封装了属性运算相关的常量和方法。<br>我们可以直接使用它来进行数学运算相关的操作  </p><p>方法：  </p><ul><li>Math.PI  <pre><code> 常量，圆周率  </code></pre></li><li>Math.abs()  <pre><code> 绝对值运算  </code></pre></li><li>Math.ceil()  <pre><code> 向上取整  </code></pre></li><li>Math.floor()  <pre><code> 向下取整  </code></pre></li><li>Math.round()  <pre><code> 四舍五入取整  </code></pre></li><li>Math.random()    <ul><li>生成一个01之间的随机数  </li><li>生成一个xy之间的随机数  <pre><code>Math.round(Math.random()*(y-x)+x);  </code></pre></li></ul></li><li>Math.pow(x,y)  <pre><code> 求x的y次幂  </code></pre></li><li>Math.sqrt()  <pre><code> 对一个数进行开方  </code></pre></li><li>Math.max()  <pre><code> 求多个数中最大值  </code></pre></li><li>Math.min()  <pre><code> 求多个数中的最小值  </code></pre></li></ul><h3 id="6-4-字符串的相关的方法"><a href="#6-4-字符串的相关的方法" class="headerlink" title="6.4 字符串的相关的方法"></a>6.4 字符串的相关的方法</h3><p>使用ES6中的字符串新方法  <strong>String.prototype.padStart(maxLength, fillString=’’)</strong> 或 **String.prototype.padEnd(maxLength, fillString=’’)**来填充字符串；  </p><ul><li>length<br> 获取字符串的长度  </li><li>charAt()<br> 根据索引获取指定的字符  </li><li>charCodeAt()<br> 根据索引获取指定的字符编码  </li><li><strong>String.fromCharCode()</strong><br> <strong>根据字符编码获取字符</strong>  </li><li>indexOf() 及lastIndexOf()<br>从一个字符串中检索指定内容<br>需要一个字符串作为参数，这个字符串就是要检索的内容，<br>如果找到该内容，则会返回其第一次出现的索引，如果没有找到则返回-1。<br>可以指定一个第二个参数，来表示开始查找的位置<br>indexOf()是从前向后找<br>lastIndexOf()是从后向前找  </li><li>slice(start,[end])<br> 可以从一个字符串中截取指定的内容，并将截取到内容返回，不会影响原变量<br> 参数：  <pre><code>  第一个：截取开始的位置（包括开始）    第二个：截取结束的位置**（不包括结束）**     可以省略第二个参数，如果省略则一直截取到最后     可以传负数，如果是负数则从后往前数  </code></pre></li><li>substr()<br> 和slice()基本一致，不同的是它第二个参数不是索引，而是截取的数量  </li><li>substring()<br> 和slice()基本一致，不同的是它不能接受负值作为参数，如果设置一个负值，则会自动修正为0，  <pre><code>  **substring()中如果第二个参数小于第一个，自动调整位置**  </code></pre></li><li>toLowerCase()<br> 将字符串转换为小写并返回  </li><li>0toUpperCase()<br> 将字符串转换为大写并返回  </li></ul><h3 id="6-5-正则表达相关方法"><a href="#6-5-正则表达相关方法" class="headerlink" title="6.5 正则表达相关方法"></a>6.5 正则表达相关方法</h3><ul><li><strong>split()</strong><br>可以根据指定内容将一个字符串拆分为一个数组<br>参数：  <pre><code>需要一个字符串作为参数，将会根据字符串去拆分数组  可以接收一个正则表达式，此时会根据正则表达式去拆分数组   </code></pre></li><li><strong>match()</strong><br>可以根据正则表达式，从一个字符串中将符合条件的内容提取出来<br>默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索  <pre><code>我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容  可以为一个正则表达式设置多个匹配模式，且顺序无所谓  match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果  </code></pre></li><li><strong>replace()</strong><br>可以将字符串中指定内容替换为新的内容<br>参数：  <pre><code>1.被替换的内容，可以接受一个正则表达式作为参数  **2.新的内容**  空串则为删除&quot; &quot;  默认只会替换第一个  </code></pre></li><li>search()<br>可以搜索字符串中是否含有指定内容<br>如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回1<br>它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串<br>serach()只会查找第一个，即使设置全局匹配也没用              </li></ul><h2 id="七、正则表达式"><a href="#七、正则表达式" class="headerlink" title="七、正则表达式"></a>七、正则表达式</h2><p>正则用来定义一些字符串的规则，程序可以根据这些规则来判断一个字符串是否符合规则，也可以将一个字符串中符合规则的内容提取出来。  </p><ul><li><p><strong>创建正则表达式</strong><br> var reg = new RegExp(“正则”,”匹配模式”); </p><p>注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符，如果要使用\则需要使用两个\来代替。</p><p>var reg = /正则表达式/匹配模式 （匹配模式可以多个一起写：/gi）  </p></li></ul><h3 id="7-1-语法："><a href="#7-1-语法：" class="headerlink" title="7.1 语法："></a>7.1 语法：</h3><ul><li><p>匹配模式：</p><p>i:忽略大小写（ignore）<br>g:全局匹配模式（默认为1次）<br>设置匹配模式时，可以都不设置，也可以设置1个，也可以全设置，设置时没有顺序要求    </p></li><li><p>正则语法</p><p>| 或<br>[] 或<br>[^ ] 除了<br>[x-y] x的ascii到y的ascii码之间的值<br>[a-z] 小写字母 <strong>（也可以[e-i])</strong><br>[A-Z] 大写字母<br>[A-z] 任意字母,<strong>但是还包括了其他ASCII在此之中的</strong><br>[0-9] 任意数字  </p></li><li><p>元符号  </p><ul><li>检查一个字符串中是否含有 .<br>  . 表示任意字符  </li><li>在正则表达式中使用\作为转义字符<br>  . 来表示.<br>  \  表示\  </li><li>\w  <pre><code>任意字母、数字、_  [A-z0-9_]  _</code></pre></li><li>\W  <pre><code>除了字母、数字、_  [ ^A-z0-9_]  </code></pre></li><li>\d  <pre><code>  任意的数字 [0-9]  </code></pre></li><li>\D  <pre><code>  除了数字 [ ^0-9]  </code></pre></li><li>\s  <pre><code>  空格  </code></pre></li><li>\S  <pre><code>除了空格  </code></pre></li><li>\b  <pre><code>单词边界  </code></pre></li><li>\B  <pre><code>除了单词边界  </code></pre></li></ul></li><li><p><strong>量词</strong><br>通过量词可以设置一个内容出现的次数<br>量词只对它前边的一个内容起作用<br>{n} 正好出现n次<br>{m,n} 出现mn次<br>{m,} m次以上<br>+至少一个，相当于{1,}<br>*个或多个，相当于{0,}<br> ? 0个或1个，相当于{0,1}      </p></li><li><p><strong>边界表达式</strong>（不要在java中用，javaScript中用）<br>^:正则开始<br>$:正则结束 ：<strong>注意结束前一个才是结束匹配</strong>  </p><pre class=" language-JavaScript"><code class="language-JavaScript">reg = /^a/;  reg = /b$/;  </code></pre></li></ul><h3 id="7-2方法："><a href="#7-2方法：" class="headerlink" title="7.2方法："></a>7.2方法：</h3><ul><li><p>test()  </p><p>可以用来检查一个字符串是否符合正则表达式<br>如果符合返回true，否则返回false  </p></li><li><p>例子<br>去掉两端的空格:  </p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"            f    afa    "</span><span class="token punctuation">;</span>   s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\s*|\s*$/g</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h2 id="八、DOM"><a href="#八、DOM" class="headerlink" title="八、DOM"></a>八、DOM</h2><p>DOM即Document Object Model（文档对象模型），通过DOM可以来任意来修改网页中各个内容  </p><ul><li>文档<br> 文档指的是网页，一个网页就是一个文档  </li><li>对象<br> 对象指将网页中的每一个节点都转换为对象  <pre><code>  转换完对象以后，就可以以一种纯面向对象的形式来操作网页了  </code></pre></li><li>模型<br> 模型用来表示节点和节点之间的关系，方便操作页面  </li><li>节点（Node）<br> 节点是构成网页的最基本的单元，网页中的每一个部分都可以称为是一个节点<br> 虽然都是节点，但是节点的类型却是不同的  <ul><li>常用的节点  <ul><li>文档节点 （Document），代表整个网页  </li><li>元素节点（Element），代表网页中的标签 </li><li>属性节点（Attribute），代表标签中的属性  </li><li>文本节点（Text），代表网页中的文本内容        </li></ul></li></ul></li></ul><h3 id="8-1-DOM操作"><a href="#8-1-DOM操作" class="headerlink" title="8.1 DOM操作"></a>8.1 DOM操作</h3><ul><li><p>DOM查询</p><p>在网页中浏览器已经为我们提供了<strong>document对象</strong>，<strong>它代表的是整个网页，它是window对象的属性，可以在页面中直接使用。</strong></p></li><li><p>document查询方法：</p><ul><li>根据元素的id属性查询一个元素节点对象：<br>document.getElementById(“id属性值”);  </li><li>根据元素的name属性值查询一组元素节点对象:<br>document.getElementsByName(“name属性值”);  </li><li>根据标签名来查询一组元素节点对象：<br>document.getElementsByTagName(“标签名”);  </li></ul></li><li><p>元素的属性：  </p><ul><li><p><strong>读取元素的属性：</strong>  </p><p>语法：元素.属性名  </p><p>例子：ele.name    </p><pre><code>        ele.id            ele.value           ele.className  </code></pre><p>注意：class属性不能采用这种方式，<strong>读取class属性时需要使用 元素.className</strong></p></li><li><p>修改元素的属性：</p><p>语法：元素.属性名 = 属性值</p></li><li><p>innerHTML</p><p>使用该属性可以获取或设置元素内部的HTML代码  </p></li></ul></li></ul><h3 id="8-2-事件（Event）"><a href="#8-2-事件（Event）" class="headerlink" title="8.2 事件（Event）"></a>8.2 事件（Event）</h3><p>事件指的是用户和浏览器之间的交互行为。比如：点击按钮、关闭窗口、鼠标移动。。。<br>我们可以为事件来绑定回调函数来响应事件。  </p><ul><li><p>绑定事件的方式：  </p><ul><li>可以在标签的事件属性中设置相应的JS代码<br>例子：  </li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"js代码..."</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  </code></pre><ul><li><p>可以通过为对象的指定事件属性设置回调函数的形式来处理事件<br>例子：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  </code></pre></li></ul></li><li><p>文档的加载</p><p>浏览器在加载一个页面时，是按照自上向下的顺序加载的，加载一行执行一行。<br>如果将js代码编写到页面的上边，当代码执行时，页面中的DOM对象还没有加载，<br>此时将会无法正常获取到DOM对象，导致DOM操作失败。  </p><ul><li><p>解决方式一：<br>可以将js代码编写到body的下边</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>          <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span>script<span class="token operator">></span>              <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>  </code></pre></li><li><p>解决方式二：</p><p>将js代码编写到window.onload = function(){}中<br>window.onload 对应的回调函数会在整个页面加载完毕以后才执行，<br>所以可以确保代码执行时，DOM对象已经加载完毕了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>      window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>     </code></pre></li></ul></li></ul><h3 id="8-3-DOM查询"><a href="#8-3-DOM查询" class="headerlink" title="8.3 DOM查询"></a>8.3 DOM查询</h3><ul><li><p>通过具体的元素节点来查询<br>元素.getElementsByTagName()  </p></li><li><p>通过标签名查询当前元素的指定后代元素  </p><p><strong>子节点包括便签元素中的文本，子元素自包含标签元素</strong>  </p><ul><li>元素.childNodes<br>获取当前元素的<strong>所有子节点</strong>  ,<strong>会获取到空白的文本子节点</strong><br>childNodes属性会获取包括文本节点在呢的所有节点，根据DOM标签标签间空白也会当成文本节点<br>注意：在IE8及以下的浏览器中，不会将空白文本当成子节点，所以该属性在IE8中会返回4个子元素而其他浏览器是9个  </li><li>元素.children<br> 获取当前元素的<strong>所有子元素</strong>  </li><li>元素.firstChild<br> 获取当前元素的<strong>第一个子节点</strong>，会获取到空白的文本子节点  </li><li>元素.lastChild<br> 获取当前元素的<strong>最后一个子节点</strong>  </li><li>元素.parentNode<br> 获取当前元素的父元素  </li><li>元素.previousSibling<br> 获取当前元素的前一个兄弟节点<br>previousElementSibling获取前一个兄弟元素，IE8及以下不支持  </li><li>元素.nextSibling<br> 获取当前元素的后一个兄弟节点  </li><li>firstElementChild获取当前元素的第一个子元素<br>firstElementChild不支持IE8及以下的浏览器，如果需要兼容他们尽量不要使用  </li><li>innerHTML和innerText<br>这两个属性并没有在DOM标准定义，但是大部分浏览器都支持这两个属性<br>两个属性作用类似，都可以获取到标签内部的内容，<br><strong>不同是innerHTML会获取到html标签，而innerText会自动去除标签</strong><br>如果使用这两个属性来设置标签内部的内容时，没有任何区别的      </li></ul></li><li><p><strong>读取标签内部的文本内容</strong>  </p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span> h1中的文本内容 <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  </code></pre><p>元素.firstChild.nodeValue  </p><h3 id="8-4-document对象的其他的属性和方法"><a href="#8-4-document对象的其他的属性和方法" class="headerlink" title="8.4 document对象的其他的属性和方法"></a>8.4 document对象的其他的属性和方法</h3><ul><li>document.all<br> <strong>获取页面中的所有元素</strong>，相当于document.getElementsByTagName(“*”);  </li><li>document.documentElement<br> <strong>获取页面中html根元素</strong>  </li><li>document.body<br> 获取页面中的body元素  </li><li>document.getElementsByClassName()<br> <strong>根据元素的class属性值查询一组元素节点对象</strong><br> 这个方法不支持IE8及以下的浏览器  </li><li>document.querySelector()<br> <strong>根据CSS选择器去页面中查询一个元素</strong><br> 如果匹配到的元素有多个，则它会返回查询到的第一个元素      </li><li>document.querySelectorAll()<br> 根据CSS选择器去页面中查询一组元素<br> 会将匹配到所有元素封装到一个数组中返回，即使只匹配到一个  </li></ul><h3 id="8-5-DOM修改"><a href="#8-5-DOM修改" class="headerlink" title="8.5 DOM修改"></a>8.5 DOM修改</h3><ul><li><p>document.createElement(“TagName”)<br>可以用于创建一个元素节点对象，<br>它需要一个标签名作为参数，将会根据该标签名创建元素节点对象，<br>并将创建好的对象作为返回值返回</p></li><li><p>document.createTextNode(“textContent”)<br>可以根据文本内容创建一个文本节点对象  </p></li><li><p><strong>父节点.appendChild(子节点)</strong><br>向父节点中添加指定的子节点  </p></li><li><p><strong>父节点.insertBefore(新节点,旧节点)</strong><br>将一个新的节点插入到旧节点的前边<br>父节点.replaceChild(新节点,旧节点)<br>使用一个新的节点去替换旧节点  </p></li><li><p><strong>父节点.removeChild(子节点)</strong><br>删除指定的子节点<br>推荐方式：<strong>子节点.parentNode.removeChild(子节点)</strong>  </p></li></ul><p><strong>以上方法，实际就是改变了相应元素（标签）的innerHTML的值。</strong>  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn07"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//向city中添加广州  </span>    <span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*      * 使用innerHTML也可以完成DOM的增删改的相关操作      * 一般我们会两种方式结合使用      */</span>      <span class="token comment" spellcheck="true">//city.innerHTML += "&lt;li>广州&lt;/li>";  </span>      <span class="token comment" spellcheck="true">//创建一个li  </span>    <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//向li中设置文本  </span>    li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"广州"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//将li添加到city中  </span>    city<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h3 id="8-6-DOM对CSS的操作"><a href="#8-6-DOM对CSS的操作" class="headerlink" title="8.6 DOM对CSS的操作"></a>8.6 DOM对CSS的操作</h3><h4 id="8-6-1-读取和修改内联样式"><a href="#8-6-1-读取和修改内联样式" class="headerlink" title="8.6.1 读取和修改内联样式"></a>8.6.1 读取和修改内联样式</h4><p>使用style属性来操作元素的内联样式  </p><ul><li><p>读取内联样式：  </p><ul><li><p>语法：元素.style.样式名  </p></li><li><p>例子：</p><ul><li><p>元素.style.width  </p></li><li><p>元素.style.height  </p><p>注意：<strong>如果样式名中带有-，则需要将样式名修改为驼峰命名法将-去掉，然后后的字母改大写</strong><br>比如：backgroundcolor &gt; backgroundColor<br>borderwidth &gt; borderWidth  </p></li></ul></li></ul></li><li><p>修改内联样式：  </p><ul><li><p>语法：元素.style.样式名 = 样式值  </p><p><strong>通过style修改和读取的样式都是内联样式</strong>，由于内联样式的优先级比较高，所以我们通过JS来修改的样式，往往会立即生效，<strong>但是如果样式中设置了!important，则内联样式将不会生效。</strong>    </p></li></ul></li></ul><h4 id="8-6-2-读取元素的当前样式"><a href="#8-6-2-读取元素的当前样式" class="headerlink" title="8.6.2 读取元素的当前样式"></a>8.6.2 读取元素的当前样式</h4><ul><li><p>正常浏览器<br> <strong>使用getComputedStyle()</strong><br> 这个方法是window对象的方法，可以返回一个对象，这个对象中保存着当前元素生效样式  </p><ul><li><p>参数：</p><ul><li>要获取样式的元素</li><li>可以传递一个伪元素，一般传null</li></ul></li><li><p>例子：</p><p>获取元素的宽度：getComputedStyle(box , null)[“width”];<br>通过该方法读取到样式都是只读的不能修改  </p></li></ul></li><li><p>IE8<br> <strong>使用currentStyle</strong>  </p><ul><li>语法：<br>元素.currentStyle.样式名  </li><li>例子：<br>box.currentStyle[“width”]<br>通过这个属性读取到的样式是只读的不能修改  </li></ul></li><li><p><strong>实现兼容性</strong>  </p><p>//对象.属性不存在，不会报错，如果直接寻找对象，（当前作用域到全局作用域）找不到会报错  </p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*       定义一个函数，用来获取指定元素的当前的样式       参数：          obj 要获取样式的元素          name 要获取的样式名  */</span>  <span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>obj <span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//对象.属性不存在，不会报错，如果直接寻找对象，（当前作用域到全局作用域）找不到会报错  </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//正常浏览器的方式，具有getComputedStyle()方法  </span>        <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj <span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//IE8的方式，没有getComputedStyle()方法  </span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//return window.getComputedStyle?getComputedStyle(obj , null)[name]:obj.currentStyle[name];              </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><h4 id="8-6-3-其他的样式相关的属性"><a href="#8-6-3-其他的样式相关的属性" class="headerlink" title="8.6.3 其他的样式相关的属性"></a>8.6.3 其他的样式相关的属性</h4><p>注意：以下样式都是只读的,未指明偏移量都是相对于当前窗口左上角  </p><ul><li>clientHeight<br> 元素的可见高度，包括元素的内容区和内边距的高度  </li><li>clientWidth<br> 元素的可见宽度，包括元素的内容区和内边距的宽度  </li><li>offsetHeight<br> 整个元素的高度，包括内容区、内边距、边框  </li><li>offfsetWidth<br> 整个元素的宽度，包括内容区、内边距、边框  </li><li>offsetParent<br> 当前元素的定位父元素<br> 离他最近的开启了定位的祖先元素，如果所有的元素都没有开启定位，则返回body  </li><li>offsetLeft及offsetTop<br>当前元素和定位父元素之间的偏移量<br>offsetLeft水平偏移量<br>offsetTop垂直偏移量  </li><li>scrollHeight及scrollWidth<br>获取元素滚动区域的高度和宽度  </li><li>scrollTop及scrollLeft<br> 获取元素垂直和水平滚动条滚动的距离  </li><li>判断滚动条是否滚动到底  <ul><li>垂直滚动条  <pre><code>scrollHeight -scrollTop = clientHeight  </code></pre></li><li>水平滚动      <pre><code>scrollWidth -scrollLeft = clientWidth      </code></pre></li></ul></li></ul><h2 id="九、事件（Event）"><a href="#九、事件（Event）" class="headerlink" title="九、事件（Event）"></a>九、事件（Event）</h2><h3 id="9-1-事件对象"><a href="#9-1-事件对象" class="headerlink" title="9.1 事件对象"></a>9.1 事件对象</h3><p>当响应函数被调用时，浏览器每次都会将一个事件对象作为实参传递进响应函数中，这个事件对象中封装了当前事件的相关信息，比如：鼠标的坐标，键盘的按键，鼠标的按键，滚轮的方向。</p><p>可以在响应函数中定义一个形参，来使用事件对象，但是在IE8以下浏览器中事件对象没有做完实参传递，而是作为window对象的属性保存  </p><p>例子：  </p><pre class=" language-javascript"><code class="language-javascript">元素<span class="token punctuation">.</span>事件 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    元素<span class="token punctuation">.</span>事件 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      e <span class="token operator">=</span> e <span class="token operator">||</span> event<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  </code></pre><p><strong>获取到鼠标的坐标</strong>  </p><ul><li>clientX和clientY<br>用于获取鼠标在当前的可见窗口的坐标<br>div的偏移量，是相对于整个页面的  </li><li>pageX和pageY 可以获取鼠标相对于当前页面的坐标<br>但是这个两个属性在IE8中不支持，所以如果需要兼容IE8，则不要使用<br>var left = event.clientX;<br>var　top = event.clientY;  </li></ul><h3 id="9-2-事件的冒泡（Bubble）"><a href="#9-2-事件的冒泡（Bubble）" class="headerlink" title="9.2 事件的冒泡（Bubble）"></a>9.2 事件的冒泡（Bubble）</h3><p>事件的冒泡指的是事件向上传导，当后代元素上的事件被触发时，将会导致其祖先元素上的同类事件也会触发。   事件的冒泡大部分情况下都是有益的，如果需要取消冒泡，则需要使用事件对象来取消<br><strong>可以将事件对象的cancelBubble设置为true，即可取消冒泡</strong><br>例子：  </p><pre class=" language-javascript"><code class="language-javascript">元素<span class="token punctuation">.</span>事件 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>      event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  </code></pre><h3 id="9-3-事件的委派"><a href="#9-3-事件的委派" class="headerlink" title="9.3 事件的委派"></a>9.3 事件的委派</h3><p>指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。  </p><p>事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能          </p><p>我们希望，只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的<br>我们可以尝试将其绑定给元素的共同的祖先元素  </p><p> <strong>target</strong> : event中的target表示的触发事件的对象  </p><h3 id="9-4-事件的绑定"><a href="#9-4-事件的绑定" class="headerlink" title="9.4 事件的绑定"></a>9.4 事件的绑定</h3><ul><li>addEventListener()<br>通过这个方法也可以为元素绑定响应函数<br>参数：<ul><li>事件的字符串，不要on  </li><li>回调函数，当事件触发时该函数会被调用</li><li>是否在捕获阶段触发事件，需要一个布尔值，一般都传false  </li></ul></li></ul><p>使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，<br>这样当事件被触发时，响应函数将会按照函数的绑定顺序执行  </p><p>这个方法不支持IE8及以下的浏览器  </p><pre class=" language-javascript"><code class="language-javascript">btn01<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      </code></pre><ul><li><p>attachEvent()  </p><p>在IE8中可以使用attachEvent()来绑定事件<br>参数：</p><ul><li>事件的字符串，要on  </li><li>回调函数  </li></ul></li></ul><p>这个方法也可以同时为一个事件绑定多个处理函数，<br>不同的是它是后绑定先执行，执行顺序和addEventListener()相反  </p><pre class=" language-javascript"><code class="language-javascript">btn01<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义一个函数，用来为指定元素绑定响应函数  </span><span class="token comment" spellcheck="true">/*      addEventListener()中的this，是绑定事件的对象      attachEvent()中的this，是window      需要统一两个方法this  */</span>  <span class="token comment" spellcheck="true">/*      参数：      obj 要绑定事件的对象      eventStr 事件的字符串(不要on)      callback 回调函数  */</span>  <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span>obj <span class="token punctuation">,</span> eventStr <span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//大部分浏览器兼容的方式  </span>        obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr <span class="token punctuation">,</span> callback <span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              this是谁由调用方式决定              callback.call(obj)          */</span>          <span class="token comment" spellcheck="true">//IE8及以下  </span>        obj<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token operator">+</span>eventStr <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//在匿名函数中调用回调函数  </span>            callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><h3 id="9-5-事件的传播"><a href="#9-5-事件的传播" class="headerlink" title="9.5 事件的传播"></a>9.5 事件的传播</h3><p>关于事件的传播网景公司和微软公司有不同的理解：</p><ol><li>微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的事件，<br>然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。</li><li>网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件，然后在向内传播给后代元素。</li><li>W3C综合了两个公司的方案，将事件传播分成了三个阶段：<ul><li>捕获阶段<br>在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件  </li><li>目标阶段  <pre><code>     事件捕获到目标元素，捕获结束开始在目标元素上触发事件  </code></pre></li><li>冒泡阶段  <pre><code>     事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件  </code></pre></li></ul></li></ol><p>如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true<br>一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false  </p><p><strong>IE8及以下的浏览器中没有捕获阶段</strong>  </p><h3 id="9-6-常用事件"><a href="#9-6-常用事件" class="headerlink" title="9.6 常用事件"></a>9.6 常用事件</h3><h4 id="9-6-1-鼠标事件"><a href="#9-6-1-鼠标事件" class="headerlink" title="9.6.1 鼠标事件"></a>9.6.1 鼠标事件</h4><ul><li>拖拽事件  </li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span>      <span class="token operator">&lt;</span>html<span class="token operator">></span>      <span class="token operator">&lt;</span>head<span class="token operator">></span>      <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>        #box1<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  width<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>  position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    #box2<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  width<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    left<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  top<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          拖拽box1元素              - 拖拽的流程                  1.当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown                  2.当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove                  3.当鼠标松开时，被拖拽元素固定在当前位置    onmouseup      */</span>        <span class="token comment" spellcheck="true">//获取box1  </span>    <span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> box2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> img1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"img1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启box1的拖拽  </span>    <span class="token function">drag</span><span class="token punctuation">(</span>box1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//开启box2的  </span>    <span class="token function">drag</span><span class="token punctuation">(</span>box2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">drag</span><span class="token punctuation">(</span>img1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      提取一个专门用来设置拖拽的函数      参数：开启拖拽的元素  */</span>  <span class="token keyword">function</span> <span class="token function">drag</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown  </span>    obj<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置box1捕获所有鼠标按下的事件  </span>        <span class="token comment" spellcheck="true">/*              setCapture()                  - 只有IE支持，但是在火狐中调用时不会报错，而如果使用chrome调用，会报错          */</span>          <span class="token comment" spellcheck="true">/*            if(box1.setCapture)&amp;#123;                  box1.setCapture();              &amp;#125;        */</span>          obj<span class="token punctuation">.</span>setCapture <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">setCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//div的偏移量 鼠标.clentX - 元素.offsetLeft  </span>        <span class="token comment" spellcheck="true">//div的偏移量 鼠标.clentY - 元素.offsetTop  </span>        <span class="token keyword">var</span> ol <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>          <span class="token keyword">var</span> ot <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//为document绑定一个onmousemove事件  </span>        document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove  </span>            <span class="token comment" spellcheck="true">//获取鼠标的坐标  </span>            <span class="token keyword">var</span> left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> ol<span class="token punctuation">;</span>              <span class="token keyword">var</span> top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> ot<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//修改box1的位置  </span>            obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>              obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//为document绑定一个鼠标松开事件  </span>        document<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//当鼠标松开时，被拖拽元素固定在当前位置    onmouseup  </span>            <span class="token comment" spellcheck="true">//取消document的onmousemove事件  </span>            document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//取消document的onmouseup事件  </span>            document<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//当鼠标松开时，取消对事件的捕获  </span>            obj<span class="token punctuation">.</span>releaseCapture <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">releaseCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*      当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容，       此时会导致拖拽功能的异常，这个是浏览器提供的默认行为，       如果不希望发生这个行为，则可以通过return false来取消默认行为       但是这招对IE8不起作用   */</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>      我是一段文字  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"box1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"img/an.jpg"</span> id<span class="token operator">=</span><span class="token string">"img1"</span> style<span class="token operator">=</span><span class="token string">"position: absolute;"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>  </code></pre><ul><li>滚轮事件：onwheel都支持  </li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span>      <span class="token operator">&lt;</span>html<span class="token operator">></span>      <span class="token operator">&lt;</span>head<span class="token operator">></span>      <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>        #box1<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  width<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//获取id为box1的div  </span>    <span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为box1绑定一个鼠标滚轮滚动的事件  </span>    <span class="token comment" spellcheck="true">/*          onmousewheel鼠标滚轮滚动的事件，会在滚轮滚动时触发，          但是火狐不支持该属性          在火狐中需要使用 DOMMouseScroll 来绑定滚动事件          注意该事件需要通过addEventListener()函数来绑定      */</span>        box1<span class="token punctuation">.</span>onmousewheel <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//event.wheelDelta 可以获取鼠标滚轮滚动的方向  </span>        <span class="token comment" spellcheck="true">//向上滚 120   向下滚 -120  </span>        <span class="token comment" spellcheck="true">//wheelDelta这个值我们不看大小，只看正负  </span>          <span class="token comment" spellcheck="true">//alert(event.wheelDelta);  </span>          <span class="token comment" spellcheck="true">//wheelDelta这个属性火狐中不支持  </span>        <span class="token comment" spellcheck="true">//在火狐中使用event.detail来获取滚动的方向  </span>        <span class="token comment" spellcheck="true">//向上滚 -3  向下滚 3  </span>        <span class="token comment" spellcheck="true">//alert(event.detail); </span>                <span class="token comment" spellcheck="true">/*              当鼠标滚轮向下滚动时，box1变长              当滚轮向上滚动时，box1变短          */</span>          <span class="token comment" spellcheck="true">//判断鼠标滚轮滚动的方向  </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>wheelDelta <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> event<span class="token punctuation">.</span>detail <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//向上滚，box1变短  </span>            box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> box1<span class="token punctuation">.</span>clientHeight <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//向下滚，box1变长  </span>            box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> box1<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*              使用addEventListener()方法绑定响应函数，取消默认行为时不能使用return false              需要使用event来取消默认行为event.preventDefault();              但是IE8不支持event.preventDefault();这个玩意，如果直接调用会报错          */</span>          event<span class="token punctuation">.</span>preventDefault <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*              当滚轮滚动时，如果浏览器有滚动条，滚动条会随之滚动，              这是浏览器的默认行为，如果不希望发生，则可以取消默认行为          */</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为火狐绑定滚轮事件  </span>    <span class="token function">bind</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span><span class="token string">"DOMMouseScroll"</span><span class="token punctuation">,</span>box1<span class="token punctuation">.</span>onmousewheel<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span>obj <span class="token punctuation">,</span> eventStr <span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//大部分浏览器兼容的方式  </span>        obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr <span class="token punctuation">,</span> callback <span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              this是谁由调用方式决定              callback.call(obj)          */</span>          <span class="token comment" spellcheck="true">//IE8及以下  </span>        obj<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token operator">+</span>eventStr <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//在匿名函数中调用回调函数  </span>            callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body style<span class="token operator">=</span><span class="token string">"height: 2000px;"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"box1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>  </code></pre><h4 id="9-6-2键盘事件"><a href="#9-6-2键盘事件" class="headerlink" title="9.6.2键盘事件"></a>9.6.2键盘事件</h4><p>键盘事件：  </p><ul><li>onkeydown<br>按键被按下<br>对于onkeydown来说如果一直按着某个按键不松手，则事件会一直触发<br>当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一点，其他的会非常的快，这种设计是为了防止误操作的发生。</li><li>onkeyup<br> 按键被松开<br>键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document  </li><li>keyCode<br>可以通过keyCode来获取按键的编码<br>通过它可以判断哪个按键被按下<br>除了keyCode，事件对象中还提供了几个属性  <ul><li>altKey  </li><li>ctrlKey  </li><li>shiftKey<br>这个三个用来判断alt ctrl 和 shift是否被按下<br>如果按下则返回true，否则返回false  </li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//console.log(event.keyCode);  </span>  <span class="token comment" spellcheck="true">//判断一个y是否被按下  </span><span class="token comment" spellcheck="true">//判断y和ctrl是否同时被按下  </span><span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">89</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ctrl和y都被按下了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><pre class=" language-javascript"><code class="language-javascript">input<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//数字 48 - 57  </span>    <span class="token comment" spellcheck="true">//使文本框中不能输入数字  </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">>=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>keyCode <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//在文本框中输入内容，属于onkeydown的默认行为  </span>        <span class="token comment" spellcheck="true">//如果在onkeydown中取消了默认行为，则输入的内容，不会出现在文本框中  </span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    </code></pre><h2 id="十、BOM"><a href="#十、BOM" class="headerlink" title="十、BOM"></a>十、BOM</h2><p>BOM即浏览器对象模型(browser object model) ，BOM可以使我们通过JS来操作浏览器，<br>在BOM中为我们提供了一组对象，用来完成对浏览器的操作，BOM对象：  </p><ul><li>Window<br>代表的是整个浏览器的窗口，同时window也是网页中的全局对象  </li><li>Navigator<br>代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器  </li><li>Location<br>代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面  </li><li>History<br>代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录<br>由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页<br>而且该操作只在当次访问时有效  </li><li>Screen<br> 代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息  </li></ul><p>这些BOM对象在浏览器中都是作为window对象的属性保存的，可以通过window对象来使用，也可以直接使用。  </p><h3 id="10-1-Navigator"><a href="#10-1-Navigator" class="headerlink" title="10.1 Navigator"></a>10.1 Navigator</h3><p>代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器。由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了。一般我们只会使用userAgent来判断浏览器的信息，userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，不同的浏览器会有不同的userAgent  </p><ul><li>火狐的userAgent<br>Mozilla5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko20100101 Firefox50.0  </li><li>Chrome的userAgent<br>Mozilla5.0 (Windows NT 6.1; Win64; x64) AppleWebKit537.36 (KHTML, like Gecko) Chrome52.0.2743.82 Safari537.36  </li><li>IE8<br>Mozilla4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)  </li><li>IE9<br>Mozilla5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)  </li><li>IE10<br>Mozilla5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)  </li><li>IE11<br>Mozilla5.0 (Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko<br> 在IE11中已经将微软和IE相关的标识都已经去除了，所以我们基本已经不能通过UserAgent来识别一个浏览器是否是IE了  </li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>firefoxi<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你是火狐！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>chromei<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你是Chrome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>msiei<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你是IE浏览器~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"ActiveXObject"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你是IE11，枪毙了你~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><h3 id="10-2-History"><a href="#10-2-History" class="headerlink" title="10.2 History"></a>10.2 History</h3><p>对象可以用来操作浏览器向前或向后翻页      </p><ul><li>length<br>可以获取到当成访问的链接数量  </li><li>back()<br>可以用来回退到上一个页面，作用和浏览器的回退按钮一样      </li><li>forward()<br>可以跳转下一个页面，作用和浏览器的前进按钮一样      </li><li>go()<br>可以用来跳转到指定的页面<br>它需要一个整数作为参数：<ul><li>1:表示向前跳转一个页面 相当于forward()  </li><li>2:表示向前跳转两个页面  </li><li>-1:表示向后跳转一个页面  </li><li>-2:表示向后跳转两个页面  </li></ul></li></ul><h3 id="10-3-Location"><a href="#10-3-Location" class="headerlink" title="10.3 Location"></a>10.3 Location</h3><p>该对象中封装了浏览器的地址栏的信息。</p><ol><li>如果直接打印location，则可以获取到地址栏的信息（当前页面的完整路径）<br>alert(location);  </li><li>如果直接将location属性修改为一个完整的路径，或相对路径<br>则我们页面会自动跳转到该路径，并且会生成相应的历史记录<br>location = “http:<a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a>;<br>location = “01.BOM.html”; <ul><li>assign()<br>用来跳转到其他的页面，作用和直接修改location一样      </li><li>reload()<br>用于重新加载当前页面，作用和刷新按钮一样<br>如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面<br>location.reload(true);</li><li>replace()<br>可以使用一个新的页面替换当前页面，调用完毕也会跳转页面<br>不会生成历史记录，不能使用回退按钮回退  </li></ul></li></ol><h3 id="10-4-window"><a href="#10-4-window" class="headerlink" title="10.4 window"></a>10.4 window</h3><h4 id="10-4-1-定时器"><a href="#10-4-1-定时器" class="headerlink" title="10.4.1 定时器"></a>10.4.1 定时器</h4><ul><li><p><strong>setInterval()</strong><br>定时调用，可以将一个函数，每隔一段时间执行一次  </p><ul><li><p>参数：</p><ul><li>回调函数，该函数会每隔一段时间被调用一次</li><li>每次调用间隔的时间，单位是毫秒</li></ul></li><li><p>返回值：</p><p>返回一个Number类型的数据，这个数字用来作为定时器的唯一标识。  </p></li><li><p><strong>clearInterval()可以用来关闭一个定时器</strong><br>方法中需要一个定时器的标识作为参数，这样将关闭标识对应的定时器   </p></li><li><p>clearInterval()可以接收任意参数：<br>如果参数是一个有效的定时器的标识，则停止对应的定时器<br>如果参数不是一个有效的标识，则什么也不做  </p></li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      count<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//关闭定时器  </span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h4 id="10-4-2-延时调用"><a href="#10-4-2-延时调用" class="headerlink" title="10.4.2 延时调用"></a>10.4.2 延时调用</h4><ul><li><p><strong>setTimeout</strong>  </p><p>延时调用一个函数不马上执行，而是隔一段时间以后在执行，而且只会执行一次<br>延时调用和定时调用的区别，定时调用会执行多次，而延时调用只会执行一次<br>延时调用和定时调用实际上是可以互相代替的，在开发中可以根据自己需要去选择  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>使用clearTimeout()来关闭一个延时调用<br>clearTimeout(timer);  </p></li></ul><h3 id="10-5-类的操作"><a href="#10-5-类的操作" class="headerlink" title="10.5 类的操作"></a>10.5 类的操作</h3><p><strong>直接修改元素的类css：</strong>  </p><p>通过style属性来修改元素的样式，每修改一个样式，浏览器就需要重新渲染一次页面。 这样的执行的性能是比较差的，而且这种形式当我们要修改多个样式时，也不太方便 我希望一行代码，可以同时修改多个样式  </p><p>我们可以通过修改元素的class属性来间接的修改样式.这样一来，我们只需要修改一次，即可同时修改多个样式，浏览器只需要重新渲染页面一次，性能比较好，<br>并且这种方式，可以使表现和行为进一步的分离  </p><pre class=" language-javascript"><code class="language-javascript">box<span class="token punctuation">.</span>className <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" b2"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意有空格，添加class属性  </span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义一个函数，用来向一个元素中添加指定的class属性值  </span><span class="token comment" spellcheck="true">/*      参数:           obj 要添加class属性的元素           cn 要添加的class值   */</span>  <span class="token keyword">function</span> <span class="token function">addClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          obj<span class="token punctuation">.</span>className <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" "</span> <span class="token operator">+</span> cn<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*      判断一个元素中是否含有指定的class属性值      如果有该class，则返回true，没有则返回false    */</span>  <span class="token keyword">function</span> <span class="token function">hasClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\b"</span> <span class="token operator">+</span> cn <span class="token operator">+</span> <span class="token string">"\\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*      删除一个元素中的指定的class属性   */</span>  <span class="token keyword">function</span> <span class="token function">removeClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建一个正则表达式  </span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\b"</span> <span class="token operator">+</span> cn <span class="token operator">+</span> <span class="token string">"\\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//删除class  </span>    obj<span class="token punctuation">.</span>className <span class="token operator">=</span> obj<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*      toggleClass可以用来切换一个类      如果元素中具有该类，则删除      如果元素中没有该类，则添加  */</span>  <span class="token keyword">function</span> <span class="token function">toggleClass</span><span class="token punctuation">(</span>obj <span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//判断obj中是否含有cn  </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasClass</span><span class="token punctuation">(</span>obj <span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//有，则删除  </span>        <span class="token function">removeClass</span><span class="token punctuation">(</span>obj <span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//没有，则添加  </span>        <span class="token function">addClass</span><span class="token punctuation">(</span>obj <span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><h2 id="十一、JSON"><a href="#十一、JSON" class="headerlink" title="十一、JSON"></a>十一、JSON</h2><p> <strong>JavaScript Object Notation</strong> JS对象表示法</p><h3 id="11-1-JSON-格式"><a href="#11-1-JSON-格式" class="headerlink" title="11.1 JSON 格式"></a>11.1 JSON 格式</h3><ol><li>复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。</li><li>原始类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和<code>null</code>（不能使用<code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code>和<code>undefined</code>）。</li><li>字符串<strong>必须使用双引号表示</strong>，不能使用单引号。</li><li>对象的键名必须放在双引号里面。</li><li>数组或对象最后一个成员的后面，不能加逗号。</li><li>JS中的对象只有JS自己认识，其他的语言都不认识  </li><li><strong>JSON就是一个特殊格式的字符串</strong>，这个字符串可以被任意的语言所识别，<br>并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互。</li><li>JSON和JS对象的格式一样，只不过<strong>JSON字符串中的属性名必须加双引号</strong>，其他的和JS语法一致  </li></ol><ul><li>JSON分类：  <ul><li>对象 {}  </li><li>数组 []  </li></ul></li><li>JSON中允许的值：<ul><li>字符串  </li><li>数值  </li><li>布尔值  </li><li>null  </li><li>对象  </li><li>数组  </li></ul></li><li>举例：  </li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token string">'[1,2,3,"hello",true]'</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token string">'&amp;#123;"arr":[1,2,3]&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr2 <span class="token operator">=</span><span class="token string">'[&amp;#123;"name":"孙悟空","age":18,"gender":"男"&amp;#125;,&amp;#123;"name":"孙悟空","age":18,"gender":"男"&amp;#125;]'</span><span class="token punctuation">;</span>  </code></pre><ul><li><p>JSON工具类  </p><ul><li>json &gt; js对象<br>JSON.parse()<br>可以将以JSON字符串转换为js对象<br>它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回  </li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> o2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">"猪八戒"</span> <span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">28</span> <span class="token punctuation">,</span> gender<span class="token punctuation">:</span><span class="token string">"男"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  </code></pre><ul><li><p>JS对象 &gt; JSON<br>JSON.stringify()</p><p>-ify/fy，表示”使……化。<br>可以将一个JS对象转换为JSON字符串<br>需要一个js对象作为参数，会返回一个JSON字符串  </p></li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">var str = JSON.stringify(obj3);  console.log(str);  </code></pre></li></ul><p>JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错    </p><h2 id="十二、other"><a href="#十二、other" class="headerlink" title="十二、other"></a>十二、other</h2><h3 id="12-1-localStorage"><a href="#12-1-localStorage" class="headerlink" title="12.1 localStorage"></a>12.1 localStorage</h3><p>只读的<code>localStorage</code> 属性允许你访问一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>Document</code></a> 源（origin）的对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage"><code>Storage</code></a>；其存储的数据能在跨浏览器会话保留。<code>localStorage</code> 类似 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage"><code>sessionStorage</code></a>，但其区别在于：存储在 <code>localStorage</code> 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 <code>sessionStorage</code> 的数据会被清除 。  </p><h3 id="12-2-eval"><a href="#12-2-eval" class="headerlink" title="12.2 eval()"></a>12.2 eval()</h3><p>eval()<br>这个函数可以用来执行一段字符串形式的JS代码，并将执行结果返回<br>    如果使用eval()执行的字符串中含有{},它会将{}当成是代码块<br>    如果不希望将其当成代码块解析，则需要在字符串前后各加一个()  </p><p>eval()这个函数的功能很强大，可以直接执行一个字符串中的js代码，但是在开发中尽量不要使用，首先它的执行性能比较差，然后它还具有安全隐患 。       </p><pre><code>var str = &#39;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#39;;  var obj = eval(&quot;(&quot;+str+&quot;)&quot;);  </code></pre><p>编码  </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">                            <span class="token comment" spellcheck="true">/*               * 在字符串中使用转义字符输入Unicode编码               *     \u四位编码               */</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\u2620"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>                  <span class="token comment" spellcheck="true">&lt;!--在网页中使用Unicode编码              &amp;#编码; 这里的编码需要的是10进制          --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#9760;">&amp;#9760;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#9856;">&amp;#9856;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>    </code></pre><p>confirm()用于弹出一个带有确认和取消按钮的提示框，需要一个字符串作为参数，该字符串将会作为提示文字显示出来。如果用户点击确认则会返回true，如果点击取消则返回false  </p><pre class=" language-JavaScript"><code class="language-JavaScript">var flag = confirm("确认删除"+name+"吗?"); </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记</title>
      <link href="/2021/12/21/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/12/21/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h3><h4 id="1-1-CSS单位"><a href="#1-1-CSS单位" class="headerlink" title="1.1 CSS单位"></a>1.1 CSS单位</h4><h5 id="1-1-1-长度单位"><a href="#1-1-1-长度单位" class="headerlink" title="1.1.1  长度单位"></a>1.1.1  长度单位</h5><p>在CSS中常用的相对单位表如下：</p><table><thead><tr><th align="left">相对单位</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">px</td><td align="left">像素</td></tr><tr><td align="left">%</td><td align="left">百分比</td></tr><tr><td align="left">em</td><td align="left">1 em等于”当前元素“字体大小</td></tr><tr><td align="left">rem</td><td align="left">1 rem相当于“根元素”字体大小</td></tr></tbody></table><ul><li><p>像素（px）</p><p>一张图片中最小的点，或是计算机屏幕中最小的点。严格来说，px属于相对单位，因为屏幕分辨率不同，1 px的大小也是不同的。若不考虑屏幕分辨率，也可以将px当做绝对单位来看。</p></li><li><p>百分比（%）</p><p>在CSS中，辈分比作为单位的属性很多，大致可以分为三类：</p><ul><li>width、height、font-size 的百分比是相对于父元素“相同属性”的值来计算的。</li><li>line-height 的百分比是相对于当前元素的font-size值来计算的。</li><li>vertical-align 的百分比是相对于当前元素的line-height值决定的。</li></ul></li><li><p>em</p><p>在CSS中，em是相对于”当前元素“的字体大小而言的。其中1em就等于“当前元素”字体（以px为单位的font-size值）大小。例如：当前元素的font-size值为10 px，则1em相当于10 px。</p><p>注意：若果当前元素的font-size值未定义，则会继承父元素的，若当前元素的所有祖先元素都未定义，则会继承浏览器默认的font-size（16 px）</p><p>三个使用技巧：</p><ul><li>技巧一：首行缩进使用 text-indent ：2 em 来实现。</li><li>技巧二：使用em作为同一单位。</li></ul><p>​        若使用em作为同一单位，则任何元素都不设置font-size为多少px，而是直接继承根元素的font-size值。</p><p>​        为了简化计算，可在CSS中提前声明body{font-size : 62.5%;}。此时1em = 10 px，我们就只需将原来的        px值除以10，然后换上em作为单位就可以了。</p><p>​        注意：在实际开发中，对于em一般要计算两次：</p><p>​                    第一次：当前元素font-size属性的px值</p><p>​                    第二次：当前元素其他属性（如 width、height等）的px值</p><ul><li>技巧三：使用em作为字体大小单位</li></ul></li><li><p>rem</p><p>rem是值相对于根元素的字体大小，是CSS3新引入的单位，IE8及以下的浏览器不兼容。rem布局是移动端最为常见的布局方式之一。</p></li></ul><h5 id="1-1-2-颜色单位"><a href="#1-1-2-颜色单位" class="headerlink" title="1.1.2  颜色单位"></a>1.1.2  颜色单位</h5><p>在CSS中可以直接使用颜色名来配置各种颜色，但是直接使用颜色名来命名非常不方便</p><ul><li><p>RGB值：</p><p>RGB通过三种颜色的不同浓度来调配出不同的颜色，R red，G green ，B blue</p><p>每一种颜色的范围在 0（黑） - 255（白） (0% - 100%) 之间</p><p>语法：RGB(红色,绿色,蓝色)</p></li><li><p>RGBA值：</p><p>就是在RGB的基础上增加了一个a表示不透明度，需要四个值，前三个和RGB一样，</p><p>第四个表示不透明度，1表示完全不透明  0表示完全透明  .5半透明</p></li><li><p>16进制的RGB：</p><p>语法：#红色绿色蓝色</p><p>​            - 颜色浓度通过 00-ff</p><p>​            - 如果颜色两位两位重复可以进行简写 ：#aabbcc –&gt; #abc</p></li><li><p>HSL和HSLA值（在工业设计使用多）：</p><p>H色相(0-360)、S饱和度(浓度0%-100%)、L亮度(亮度0%-100%)</p></li></ul><h4 id="1-2-CSS特性"><a href="#1-2-CSS特性" class="headerlink" title="1.2 CSS特性"></a>1.2 CSS特性</h4><ul><li><p>继承性</p><p>在CSS中有三类具有继承性的属性：</p><ul><li><p>文本型关属性:</p><p>font-size、font-family、font-style、font-weight、font、line-height、text-align、text-indent、</p><p>word-spacing</p></li><li><p>列表相关属性:</p><p>list-style-image、list-style-position、list-style-type、list-style</p></li><li><p>颜色相关属性:</p><p>color</p></li></ul></li><li><p>层叠性</p><p>CSS的层叠性，指的就是样式的覆盖。对于同一个元素若重复定义多个相同的属性，且这些样式具有相同的权重时，CSS会以最后定义的属性值为准，即遵循<strong>”后来者居上“</strong>原则。</p><p>后来者原则必须符合的三个条件：</p><ul><li>元素相同</li><li>属性相同</li><li>权重相同</li></ul></li></ul><h4 id="1-3-CSS优先级"><a href="#1-3-CSS优先级" class="headerlink" title="1.3 CSS优先级"></a>1.3 CSS优先级</h4><p>CSS（层叠样式表），层叠其实指的就是样式的覆盖，当样式的覆盖发生冲突时，常见的有以下5中情况：</p><ul><li><p>引用方式冲突</p><p>CSS中常用的引用方式为：外部样式、内部样式和行内样式，其优先级为：行内样式&gt;（内部样式=外部样式）</p><p>若内部样式与外部样式同时存在，则遵循**”后来者居上”**的原则。</p></li><li><p>继承方式冲突</p><p>若由于继承方式引起的冲突，则<strong>“最近的祖先元素”</strong>获胜。</p></li><li><p>指定样式冲突</p><p>所谓的指定样式，值得是指定<strong>“当前元素”</strong>的样式。当直接指定的样式发生冲突时，样式权重高者获胜。</p></li><li><p>继承样式和指定样式冲突</p><p>当继承样式和指定样式发生冲突时，指定样式获胜。</p></li><li><p>!important（慎用）</p></li></ul><p>总而言之，对于CSS优先级的内容，主要掌握以下两条黄金定律即可：</p><p>​    <strong>优先级高的样式覆盖优先级低的样式。</strong></p><p>​    <strong>同一优先级的样式，遵循“后来者居上”</strong></p><h4 id="1-4-CSS引用方式"><a href="#1-4-CSS引用方式" class="headerlink" title="1.4 CSS引用方式"></a>1.4 CSS引用方式</h4><ul><li><p>外部样式表</p><p>多用于公有样式</p></li><li><p>内部样式表</p><p>多用于私有样式</p></li><li><p>行内样式表</p><p>多用于小修改或者优先级方面</p></li></ul><h4 id="1-5-CSS选择器"><a href="#1-5-CSS选择器" class="headerlink" title="1.5 CSS选择器"></a>1.5 CSS选择器</h4><h5 id="1-5-1-常用选择器"><a href="#1-5-1-常用选择器" class="headerlink" title="1.5.1  常用选择器"></a>1.5.1  常用选择器</h5><ul><li><p>元素选择器</p><p>作用：根据标签名来选中指定的元素</p><p><strong>语法：标签名{}</strong></p><p><code>p&#123;</code></p><p>​          <code>color: red;</code></p><p>​        <code>&#125;</code></p></li><li><p>id选择器</p><p>作用：根据元素的id属性值选中一个元素</p><p><strong>语法：#id属性值{}</strong></p><p><code>#box&#123;</code></p><p>​          <code>color: yellow</code></p><p>​        <code>&#125;</code></p></li><li><p>类选择器</p><p>作用：根据元素的class属性值选中一组元素</p><p><strong>语法：.class属性值</strong></p><p><code>.box&#123;</code></p><p>​          <code>color: red;</code></p><p>​        <code>&#125;</code></p></li><li><p>通配选择器</p><p>作用：选中页面中的所有元素</p><p><strong>语法：</strong>{}</p><p><code>*&#123;</code></p><p>​          <code>color： red;</code></p><p>​        <code>&#125;</code></p></li></ul><h5 id="1-5-2-关系选择器"><a href="#1-5-2-关系选择器" class="headerlink" title="1.5.2  关系选择器"></a>1.5.2  关系选择器</h5><ul><li><p>后代选择器</p><p>作用：选中元素内部的某一个元素，包括子元素和后代元素。</p><p><strong>语法：M N{}</strong></p><p><code>div span&#123;</code></p><p>​            <code>color: skyblue;</code></p><p>​          <code>&#125;</code></p></li><li><p>子代选择器</p><p>作用：选中元素内部的某一子元素。</p><p><strong>语法：M&gt;N{}</strong></p><p> <code>div.box&gt;span&#123;</code></p><p>​          <code>color: orange;</code></p><p>​        <code>&#125;</code></p></li><li><p>兄弟选择器</p><p>作用：选中元素后面的某一类兄弟元素。</p><p><strong>语法：M~N{}</strong></p><p><code>p~span&#123;</code></p><p>​        <code>color: red;</code></p><p>​      <code>&#125;</code></p><p>作用：选择下一个兄弟</p><p><strong>语法：前一个+下一个</strong></p><p><code>p+span&#123;</code></p><p>​        <code>color: purple;</code></p><p>​      <code>&#125;</code></p></li></ul><h5 id="1-5-3-复合选择器"><a href="#1-5-3-复合选择器" class="headerlink" title="1.5.3  复合选择器"></a>1.5.3  复合选择器</h5><ul><li><p>交集选择器</p><p>作用：选中同时符合多个条件的元素</p><p>语法：选择器1选择器2选择器3选择器n{}</p><p><strong>注意：交集选择器中如果有元素选择器，必须使用元素选择器开头</strong></p><p><code>.a.b.c&#123;</code></p><p>​      <code>color: *blue*;</code></p><p>​    <code>&#125;</code></p></li><li><p>选择器分组（并集选择器）</p><p>作用：同时选择多个选择器对应的元素</p><p>语法：选择器1，选择器2，选择器3，选择器n{}</p><p><code>h1,span&#123;</code></p><p>​      <code>color: green;</code></p><p>​    <code>&#125;</code></p></li></ul><h5 id="1-5-4-属性选择器"><a href="#1-5-4-属性选择器" class="headerlink" title="1.5.4  属性选择器"></a>1.5.4  属性选择器</h5><ul><li><p>[属性名] ：</p><p>选择含有指定属性的元素</p><p><code>p[title]&#123;</code></p><p>​          <code>color: orange</code></p><p>​        <code>&#125;</code></p></li><li><p>[属性名=属性值] ：</p><p>选择含有指定属性和属性值的元素</p><p><code>p[title=abc]&#123;</code></p><p>​          <code>color: orange</code></p><p>​        <code>&#125;</code></p></li><li><p>[属性名^=属性值] ：</p><p>选择属性值以指定值开头的元素</p><p><code>p[title^=abc]&#123;</code></p><p>​          <code>color: orange</code></p><p>​        <code>&#125;</code></p></li><li><p>[属性名$=属性值] ：</p><p>选择属性值以指定值结尾的元素</p><p> <code>p[title$=abc]&#123;</code></p><p>​          <code>color: orange</code></p><p>​        <code>&#125;</code></p></li><li><p>[属性名*=属性值] ：</p><p>选择属性值中含有某值的元素的元素</p><p><code>p[title\*=e]&#123;</code></p><p>​          <code>color: orange;</code></p><p>​        <code>&#125;</code></p></li></ul><h5 id="1-5-5-伪类选择器"><a href="#1-5-5-伪类选择器" class="headerlink" title="1.5.5  伪类选择器"></a>1.5.5  伪类选择器</h5><p>伪类（不存在的类，特殊的类）</p><p>​    伪类用来描述一个元素的特殊状态，比如：第一个子元素、被点击的元素、鼠标移入的元素…</p><ul><li><p>:first-child 第一个子元素：</p><p><code>ul &gt; li:first-child&#123;</code></p><p>​            <code>color: red;</code></p><p>​          <code>&#125;</code></p></li><li><p>:last-child 最后一个子元素：</p><p><code>ul &gt; li:last-child&#123;</code></p><p>​            <code>color: red;</code></p><p>​          <code>&#125;</code></p></li><li><p>:nth-child() 选中第n个子元素：</p><p><code>ul &gt; li:nth-child(n)&#123;</code></p><p>​            <code>color: red;</code></p><p>​          <code>&#125;</code></p></li><li><p>特殊值：</p><ul><li><p>n 表示选中0到正无穷：</p><p><code>ul &gt; li:nth-child(n)&#123; &#125;</code></p></li><li><p>2n 或 even 表示选中偶数位的元素：</p><p><code>ul &gt; li:nth-child(2n/even)&#123;</code></p><p>​              <code>color: red;</code></p><p>​            <code>&#125;</code></p></li><li><p>2n+1 或 odd 表示选中奇数位的元素：</p><p><code>ul &gt; li:nth-child(2n+1/odd)&#123;</code></p><p>​              <code>color: red;</code></p><p>​            <code>&#125;</code></p></li></ul></li><li><p>:not() 否定伪类：</p><p>将符合条件的元素从选择器中去除</p><p><code>ul &gt; li:not(:nth-of-type(3))&#123;</code></p><p>​           <code>color: yellowgreen;</code></p><p>​        <code>&#125;</code></p></li></ul><p>1.5.6  其他选择器</p><ul><li><p>相邻选择器</p><p>作用：选中元素后面的某一个“相邻”的兄弟元素</p><p>语法：M+N{}</p><p>在两<code>li</code>之间添加一个边框：<code>li+li&#123;border-left:1px solid #999;&#125;</code></p></li><li><p>：first-letter选择器</p><p>作用：选中元素内容中的“第一个字”或“第一个字母”</p><p>语法：元素:first-letter{}</p></li><li><p>：first-line选择器</p><p>作用：选中元素内容中的“第一行文字”</p><p>语法：元素:first-line{}</p></li></ul><h5 id="1-5-7-选择器权重"><a href="#1-5-7-选择器权重" class="headerlink" title="1.5.7 选择器权重"></a>1.5.7 选择器权重</h5><p>在CSS中。各种选择器的权重若下表所示：</p><table><thead><tr><th>选择器</th><th>权重</th></tr></thead><tbody><tr><td>通配符</td><td>0</td></tr><tr><td>伪元素</td><td>1</td></tr><tr><td>元素选择器</td><td>1</td></tr><tr><td>class选择器</td><td>10</td></tr><tr><td>伪类</td><td>10</td></tr><tr><td>属性选择器</td><td>10</td></tr><tr><td>id选择器</td><td>100</td></tr><tr><td>行内样式</td><td>1000</td></tr></tbody></table><p>常见的伪元素：</p><p>::before、::after、::first-letter和first-line</p><p><strong>在CSS中，选择器的权重只针对指定样式（当前元素），并不能用于继承样式。</strong></p><h4 id="1-6-CSS属性的百分比"><a href="#1-6-CSS属性的百分比" class="headerlink" title="1.6  CSS属性的百分比"></a>1.6  CSS属性的百分比</h4><table><thead><tr><th>属性</th><th>百分比</th></tr></thead><tbody><tr><td>width</td><td>相对于父元素的 width 值来计算</td></tr><tr><td>height</td><td>相对于父元素的 height 值来计算</td></tr><tr><td>padding</td><td>相对于父元素的 width 值来计算</td></tr><tr><td>margin</td><td>相对于父元素的 width 值来计算</td></tr><tr><td>line-height</td><td>相对于当前元素的 font-size 值来计算</td></tr><tr><td>vertical-align</td><td>相对于当前元素的 line-height 值来计算</td></tr><tr><td>left 或 right</td><td>相对于包含块的 width 值来计算</td></tr><tr><td>top或 bottom</td><td>相对于包含块的 height 值来计算</td></tr></tbody></table><h3 id="二、文档流与盒子模型"><a href="#二、文档流与盒子模型" class="headerlink" title="二、文档流与盒子模型"></a>二、文档流与盒子模型</h3><h4 id="2-1-文档流"><a href="#2-1-文档流" class="headerlink" title="2.1 文档流"></a>2.1 文档流</h4><p>网页是一个多层的结构，一层摞着一层，通过CSS可以分别为每一层来设置样式，作为用户来讲只能看到最顶上一层，这些层中，<strong>最底下的一层称为文档流，文档流是网页的基础</strong>，我们所创建的元素默认都是在文档流中进行排列</p><ul><li><p>对于我们来元素主要有两个状态：</p><ul><li>在文档流中</li><li>不在文档流中（脱离文档流）</li></ul></li><li><p>元素在文档流中的特点：</p><ul><li><p>块元素：</p><p>在页面中独占一行(自上向下垂直排列)</p><p>默认宽度是父元素的全部（会把父元素撑满）</p><p>默认高度是被内容撑开（子元素）</p></li><li><p>行内元素：</p><p>不会独占页面的一行，只占自身的大小</p><p>在页面中左向右水平排列，如果一行之中不能容纳下所有的行内元素，则元素会换到第二行继续自左向右排列（书写习惯一致）</p><p>默认宽度和高度都是被内容撑开</p></li></ul></li></ul><h4 id="2-2-盒子模型基础"><a href="#2-2-盒子模型基础" class="headerlink" title="2.2  盒子模型基础"></a>2.2  盒子模型基础</h4><p>CSS将页面中的所有元素都设置为了一个矩形的盒子，将元素设置为矩形的盒子后，对页面的布局就变成将不同的盒子摆放到不同的位置，每一个盒子都由一下几个部分组成（从内到外）：</p><ul><li><p>内容区（content）：</p><p>元素中的所有的子元素和文本内容都在内容区中排列，内容区的大小由width 和 height两个属性来设置：</p><ul><li>width 设置内容区的宽度</li><li>height 设置内容区的高度</li></ul></li><li><p>内边距（padding）：</p><p>内容区和边框之间的距离是内边距，一共有四个方向的内边距：</p><ul><li><p>padding-top</p></li><li><p>padding-right</p></li><li><p>padding-bottom</p></li><li><p>padding-left</p></li></ul><p>简写属性可以同时指定四个方向的内边距，规则和border-width 一样。</p><p>内边距的设置会影响到盒子的大小，背景颜色会延伸到内边距上，一个盒子的可见框的大小，由内容区、内边距和边框共同决定，所以在计算盒子大小时，需要将这三个区域加到一起计算。</p><p><strong>padding属性4 个方向值的百分比是相对于父元素width计算的。</strong></p></li><li><p>边框（border）：</p><p>边框属于盒子边缘，边框里边属于盒子内部，出了边框都是盒子的外部，边框的大小会影响到整个盒子的大小要设置边框，需要至少设置三个样式：</p><ul><li><p>边框的宽度 border-width：</p><p>用来指定四个方向的边框的宽度，默认值一般都是3个像素，值的情况：</p><ul><li>四个值：上 右 下 左</li><li>三个值：上 左右 下</li><li>两个值：上下 左右</li><li>一个值：上下左右</li></ul><p>除了border-width还有一组 border-xxx-width，xxx可以是 top right bottom left，用来单独指定某一个边的宽度。</p></li><li><p>边框的颜色 border-color：</p><p>用来指定边框的颜色，同样可以分别指定四个边的边框，规则和border-width一样</p><p>border-color也可以省略不写，如果省略了则自动使用color的颜色值</p></li><li><p>边框的样式 border-style：</p><p>指定边框的样式，默认值是none 表示没有边框</p><ul><li>solid 表示实线</li><li>dotted 点状虚线</li><li>dashed 虚线</li><li>double 双线</li></ul></li><li><p>除了border以外还有四个border-xxx：</p><ul><li>border-top</li><li>border-right</li><li>border-bottom</li><li>border-left</li></ul></li></ul><p>border简写属性：通过该属性可以同时设置边框所有的相关样式，并且没有顺序要求</p></li><li><p>外边距（margin）：</p><p>外边距不会影响盒子可见框的大小，但是外边距会影响盒子的位置，并且会影响到盒子实际占用空间。</p><p>一共有四个方向的外边距：</p><ul><li><p>margin-top：</p><p>上外边距，设置一个正值，元素会向下移动</p></li><li><p>margin-right：</p><p>默认情况下设置margin-right不会产生任何效果</p></li><li><p>margin-bottom：</p><p>下外边距，设置一个正值，其下边的元素会向下移动</p></li><li><p>margin-left：</p><p>左外边距，设置一个正值，元素会向右移动</p></li></ul><p>元素在页面中是按照自左向右的顺序排列的，所以默认情况下，如果我们设置的左和上外边距，则会移动元素自身，而设置下和右外边距会移动其他元素。<strong>margin也可以设置负值，如果是负值则元素会向相反的方向移动</strong>。</p><p>margin的简写属性：margin 可以同时设置四个方向的外边距，用法和padding一样。</p></li></ul><h4 id="2-3-盒子的布局问题"><a href="#2-3-盒子的布局问题" class="headerlink" title="2.3  盒子的布局问题"></a>2.3  盒子的布局问题</h4><h5 id="2-3-1-水平方向的布局"><a href="#2-3-1-水平方向的布局" class="headerlink" title="2.3.1  水平方向的布局"></a>2.3.1  水平方向的布局</h5><ul><li><p>元素在其父元素中水平方向的位置由以下几个属性共同决定：</p><p>margin-left、border-left、padding-left、width、padding-right、border-right、margin-right</p></li><li><p>一个元素在其父元素中，<strong>水平布局必须要满足以下的等式</strong>：</p><p>**margin-left + border-left + padding-left + width + padding-right + border-right + margin-right ** </p><p><strong>= 其父元素内容区的宽度 （必须满足）</strong></p></li><li><p>以上等式必须满足，如果相加结果使等式不成立，则称为<strong>过度约束</strong>，则等式会自动调整：</p><p>如果这七个值中<strong>没有为 auto 的</strong>情况，则浏览器会<strong>自动调整margin-right值</strong>以使等式满足</p><p>这七个值中有三个值可设置为auto： width、margin-left、margin-right</p><p>如果某个值为auto，则会自动调整为auto的那个值以使等式成立</p></li></ul><p>如果将一个宽度和一个外边距设置为auto，则宽度会调整到最大，设置为auto的外边距会自动为0</p><p>如果将三个值都设置为auto，则外边距都是0，宽度最大</p><p>如果<strong>将两个外边距设置为auto</strong>，宽度固定值，则会将外边距设置为相同的值，我们经常利用这个特点来<strong>使一个元素在其父元素中水平居中</strong>。</p><h5 id="2-3-2-垂直方向的布局"><a href="#2-3-2-垂直方向的布局" class="headerlink" title="2.3.2  垂直方向的布局"></a>2.3.2  垂直方向的布局</h5><p>子元素是在父元素的内容区中排列的，如果子元素的大小超过了父元素，则子元素会从父元素中溢出</p><p>我们可以使用 overflow 属性来处理子元素从父元素中溢出的问题</p><p>overflow的可选值：</p><ul><li>visible，默认值 子元素会从父元素中溢出，在父元素外部的位置显示</li><li>hidden 溢出内容将会被裁剪不会显示</li><li>scroll 生成两个滚动条，通过滚动条来查看完整的内容</li><li>auto 根据需要生成滚动条</li></ul><h4 id="2-4-外边距的折叠问题"><a href="#2-4-外边距的折叠问题" class="headerlink" title="2.4  外边距的折叠问题"></a>2.4  外边距的折叠问题</h4><p>垂直外边距的重叠（折叠），相邻的垂直方向外边距会发生重叠现象</p><ul><li><p>兄弟元素</p><ul><li><p>兄弟元素间的相邻垂直外边距会取两者之间的较大值（两者都是正值）</p></li><li><p>特殊情况：</p><p>如果相邻的外边距一正一负，则取两者的和</p><p>如果相邻的外边距都是负值，则取两者中绝对值较大的</p></li><li><p>兄弟元素之间的外边距的重叠，对于开发是有利的，所以我们不需要进行处理</p></li></ul></li><li><p>父子元素：</p><p>父子元素间相邻外边距，子元素的会传递给父元素（上外边距）</p><p>父子外边距的折叠会影响到页面的布局，必须要进行处理</p></li></ul><h4 id="2-5-行内元素的盒模型"><a href="#2-5-行内元素的盒模型" class="headerlink" title="2.5  行内元素的盒模型"></a>2.5  行内元素的盒模型</h4><p>行内元素的盒模型：</p><ul><li><p>行内元素不支持设置宽度和高度</p></li><li><p>行内元素可以设置padding，但是垂直方向padding不会影响页面的布局</p></li><li><p>行内元素可以设置border，垂直方向的border不会影响页面的布局</p></li><li><p>行内元素可以设置margin，垂直方向的margin不会影响布局</p></li></ul><p>display 用来设置元素显示的类型，可选值：</p><ul><li><p>inline 将元素设置为行内元素</p></li><li><p>block 将元素设置为块元素</p></li><li><p>inline-block 将元素设置为行内块元素，行内块，既可以设置宽度和高度又不会独占一行</p></li><li><p>table 将元素设置为一个表格</p></li><li><p>none 元素不在页面中显示</p></li></ul><p>visibility 用来设置元素的显示状态，可选值：</p><ul><li><p>visible 默认值，元素在页面中正常显示</p></li><li><p>hidden 元素在页面中隐藏 不显示，但是依然占据页面的位置</p></li></ul><h4 id="2-6-盒子的尺寸"><a href="#2-6-盒子的尺寸" class="headerlink" title="2.6  盒子的尺寸"></a>2.6  盒子的尺寸</h4><p>默认情况下，盒子可见框的大小由内容区、内边距和边框共同决定，box-sizing 用来设置盒子尺寸的计算方式（设置width和height的作用）</p><p>可选值：</p><ul><li>content-box 默认值，宽度和高度用来设置内容区的大小</li><li>border-box 宽度和高度用来设置整个盒子可见框的大小</li><li>width 和 height 指的是内容区、内边距和边框的总大小</li></ul><h4 id="2-7-轮廓和圆角"><a href="#2-7-轮廓和圆角" class="headerlink" title="2.7  轮廓和圆角"></a>2.7  轮廓和圆角</h4><ul><li><p>box-shadow ：</p><p>用来设置元素的阴影效果，阴影不会影响页面布局</p><ul><li><p>第一个值：</p><p>水平偏移量 设置阴影的水平位置 正值向右移动 负值向左移动</p></li><li><p>第二个值：</p><p>垂直偏移量 设置阴影的水平位置 正值向下移动 负值向上移动</p></li><li><p>第三个值：</p><p>阴影的模糊半径</p></li><li><p>第四个值：</p><p>阴影的颜色</p></li></ul><p><code>box-shadow: 0px 0px 50px rgba(0, 0, 0, 0.3) ;</code></p></li><li><p>outline：</p><p>用来设置元素的轮廓线，用法和border一模一样，轮廓和边框不同之处，就是轮廓不会影响到可见框的大小 </p></li><li><p>border-radius: </p><p>用来设置圆角 圆角设置的圆的半径大小，border-radius 可以分别指定四个角的圆角：</p><ul><li>四个值：左上  右上  右下  左下</li><li>三个值：左上  右上/左下  右下 </li><li>两个值：左上/右下   右上/左下  </li></ul></li></ul><h3 id="三、浮动布局"><a href="#三、浮动布局" class="headerlink" title="三、浮动布局"></a>三、浮动布局</h3><h4 id="3-1-浮动的简介"><a href="#3-1-浮动的简介" class="headerlink" title="3.1  浮动的简介"></a>3.1  浮动的简介</h4><p>我们可以使用 float 属性来设置于元素的浮动，通过浮动可以使一个元素向其父元素的左侧或右侧移动</p><ul><li><p>可选值：</p><ul><li><p>none 默认值 ，元素不浮动</p></li><li><p>left 元素向左浮动</p></li><li><p>right 元素向右浮动</p></li></ul></li><li><p>注意：</p><ul><li>元素设置浮动以后，水平布局的等式便不需要强制成立</li><li>元素设置浮动以后，会<strong>完全从文档流中脱离</strong>，不再占用文档流的位置，</li><li>元素设置浮动以后，元素下边还在文档流中的元素会自动向上移动</li></ul></li><li><p>浮动的特点：</p><ul><li>浮动元素会完全脱离文档流，不再占据文档流中的位置</li><li>设置浮动以后元素会向父元素的左侧或右侧移动，浮动元素默认不会从父元素中移出</li><li>浮动元素向左或向右移动时，不会超过它前边的其他浮动元素</li><li>如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移</li><li>浮动元素不会超过它上边的浮动的兄弟元素，最多最多就是和它一样高</li></ul></li><li><p>简单总结：</p><p>浮动目前来讲它的主要作用就是让页面中的元素可以水平排列，通过浮动可以制作一些水平方向的布局。</p></li></ul><h4 id="3-2-浮动的其他特点"><a href="#3-2-浮动的其他特点" class="headerlink" title="3.2  浮动的其他特点"></a>3.2  浮动的其他特点</h4><p><strong>浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，</strong>我们可以利用浮动来设置文字环绕图片的效果。</p><p>元素设置浮动以后，将会从文档流中脱离，从文档流中脱离后，元素的一些特点也会发生变化，</p><p>脱离文档流的特点：</p><ul><li><p>块元素：</p><ul><li>块元素不在独占页面的一行</li><li>块元素的宽度和高度默认都被内容撑开</li></ul></li><li><p>行内元素：</p><ul><li>行内元素脱离文档流以后会变成块元素，特点和块元素一样</li><li>脱离文档流以后，不需要再区分块和行内了</li></ul></li></ul><h4 id="3-3-BFC（块级格式化环境）"><a href="#3-3-BFC（块级格式化环境）" class="headerlink" title="3.3  BFC（块级格式化环境）"></a>3.3  BFC（块级格式化环境）</h4><p>BFC(Block Formatting Context) 块级格式化环境</p><ul><li><p>BFC是一个CSS中的一个隐含的属性，可以为一个元素开启BFC，开启BFC该元素会变成一个独立的布局区域</p></li><li><p>元素开启BFC后的特点：</p><ul><li>开启BFC的元素不会被浮动元素所覆盖</li><li>开启BFC的元素子元素和父元素外边距不会重叠</li><li>开启BFC的元素可以包含浮动的子元素</li></ul></li><li><p>一些特殊开启元素的BFC的方法：</p><ul><li><p>设置元素的浮动（不推荐）</p></li><li><p>将元素设置为行内块元素（不推荐）</p></li><li><p>将元素的overflow设置为一个非visible的值：</p><p>——常用的方式 为元素设置 overflow: hidden <strong>开启其BFC 以使其可以包含浮动元素。</strong></p></li></ul></li></ul><h4 id="3-4-高度塌陷问题"><a href="#3-4-高度塌陷问题" class="headerlink" title="3.4  高度塌陷问题"></a>3.4  高度塌陷问题</h4><ul><li><p>高度塌陷的问题：</p><p>在浮动布局中，父元素的高度默认是被子元素撑开的。当子元素浮动后，其会完全脱离文档流，子元素从文档流中脱离，将会无法撑起父元素的高度，导致父元素的高度丢失。父元素高度丢失以后，其下的元素会自动上移，导致页面的布局混乱。</p></li><li><p>使用clear属性清除浮动：</p><p>如果我们不希望某个元素因为其他元素浮动的影响而改变位置，可以通过clear属性来清除浮动元素对当前元素所产生的影响。</p><ul><li><p>作用：清除浮动元素对当前元素所产生的影响</p></li><li><p>可选值：</p><ul><li>left 清除左侧浮动元素对当前元素的影响</li><li>right 清除右侧浮动元素对当前元素的影响</li><li>both 清除两侧中最大影响的那侧</li></ul></li><li><p>原理：</p><p>设置清除浮动以后，浏览器会自动为元素添加一个上外边距，以使其位置不受其他元素的影响</p></li><li><p>缺点：会增加多余的标签，且会破坏HTML代码的语义</p></li></ul></li><li><p>使用<code>.clearfix::after</code>来清除浮动：</p><p><code>clearfix</code> 可以同时解决高度塌陷和外边距重叠的问题，遇到这些问题时，直接使用<em>clearfix</em>这个类即可。</p><p><code>*.clearfix::before,*</code></p><p>​    <code>*.clearfix::after&#123;*</code></p><p>​      <code>*content: &#39;&#39;;*</code></p><p>​      <code>*display: table;*</code></p><p>​      <code>*clear: both;*</code></p><p>​    <code>*&#125;*</code></p></li></ul><h3 id="四、定位布局"><a href="#四、定位布局" class="headerlink" title="四、定位布局"></a>四、定位布局</h3><h4 id="4-1-定位的简介"><a href="#4-1-定位的简介" class="headerlink" title="4.1  定位的简介"></a>4.1  定位的简介</h4><ul><li><p>定位（position）：</p><p>定位是一种更加高级的布局手段，通过定位可以将元素摆放到页面的任意位置，使用position属性来设置定位可选值：</p><ul><li>static 默认值，元素是静止的没有开启定位</li><li>relative 开启元素的相对定位</li><li>absolute 开启元素的绝对定位</li><li>fixed 开启元素的固定定位</li><li>sticky 开启元素的粘滞定位</li></ul></li><li><p>元素的层级：</p><p>对于开启了定位元素，可以通过z-index属性来指定元素的层级。z-index需要一个整数作为参数，值越大元素的层级越高，元素的层级越高越优先显示。如果元素的层级一样，则优先显示靠下的元素，祖先的元素的层级再高也不会盖住后代元素。</p></li></ul><h4 id="4-2-相对定位"><a href="#4-2-相对定位" class="headerlink" title="4.2  相对定位"></a>4.2  相对定位</h4><ul><li><p>定义：</p><p>当元素的position属性值设置为<strong>relative</strong>时则开启了元素的相对定位</p></li><li><p>相对定位的特点：</p><ul><li>元素开启相对定位以后，如果不设置偏移量元素不会发生任何的变化</li><li>相对定位是参照于元素在文档流中的位置进行定位的</li><li>相对定位会提升元素的层级</li><li>相对定位不会使元素脱离文档流</li><li>相对定位不会改变元素的性质块还是块，行内还是行内</li></ul></li><li><p>偏移量（offset）：</p><p>当元素开启了定位以后，可以通过偏移量来设置元素的位置</p><ul><li><p>top：</p><p>定位元素和定位位置上边的距离</p></li><li><p>bottom：</p><p>定位元素和定位位置下边的距离</p></li><li><p>left：</p><p>定位元素和定位位置的左侧距离</p><p>right：</p><p>定位元素和定位位置的右侧距离</p></li></ul></li><li><p>定位元素的位置：</p><ul><li><p>定位元素垂直方向的位置由top和bottom两个属性来控制，通常情况下我们只会使用其中一</p><ul><li>top值越大，定位元素越向下移动</li><li>bottom值越大，定位元素越向上移动。</li></ul></li><li><p>定位元素水平方向的位置由left和right两个属性控制，通常情况下只会使用一个</p><ul><li>left越大元素越靠右</li><li>right越大元素越靠左</li></ul></li></ul></li></ul><h4 id="4-3-绝对定位"><a href="#4-3-绝对定位" class="headerlink" title="4.3  绝对定位"></a>4.3  绝对定位</h4><ul><li><p>定义：</p><p>当元素的position属性值设置为absolute时，则开启了元素的绝对定位</p></li><li><p>绝对定位的特点：</p><ul><li>开启绝对定位后，如果不设置偏移量元素的位置不会发生变化</li><li>开启绝对定位后，元素会从文档流中脱离</li><li>绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开</li><li>绝对定位会使元素提升一个层级</li><li>绝对定位元素是相对于其包含块进行定位的</li></ul></li><li><p>包含块( containing block )</p><ul><li><p>正常情况下：</p><p>包含块就是离当前元素最近的祖先块元素。</p></li><li><p>绝对定位的包含块：</p><p>离它最近的开启了定位的祖先元素，如果所有的祖先元素都没有开启定位，则根元素（HTML）就是它的包含块。</p></li><li><p>HTML（根元素、初始包含块）：</p><p>大小不固定，可随滚动条滚动</p></li></ul></li></ul><h4 id="4-4-固定定位"><a href="#4-4-固定定位" class="headerlink" title="4.4  固定定位"></a>4.4  固定定位</h4><ul><li><p>定义：</p><p>将元素的position属性设置为fixed则开启了元素的固定定位。</p></li><li><p>特点：</p><p>固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样，唯一不同的是<strong>固定定位永远参照于浏览器的视口</strong>（大小固定）进行定位，固定定位的元素不会随网页的滚动条滚动。</p></li></ul><h4 id="4-5-粘滞定位"><a href="#4-5-粘滞定位" class="headerlink" title="4.5  粘滞定位"></a>4.5  粘滞定位</h4><ul><li><p>定义：</p><p>当元素的position属性设置为sticky时则开启了元素的粘滞定位。</p></li><li><p>特点：</p><p>粘滞定位和相对定位的特点基本一致，不同的是粘滞定位可以在元素到达某个位置时将其固定。</p></li></ul><h4 id="4-6-绝对定位元素的布局"><a href="#4-6-绝对定位元素的布局" class="headerlink" title="4.6  绝对定位元素的布局"></a>4.6  绝对定位元素的布局</h4><ul><li><p>水平布局：</p><p>left + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right = 包含块的内容区的宽度</p></li><li><p>开启绝对定位后:</p><p>水平方向的布局等式就需要添加left 和 right 两个值，此时规则和之前一样只是多添加了两个值：</p><ul><li><p>当发生过度约束：</p><ul><li>如果9个值中没有 auto 则自动调整right值以使等式满足</li><li>如果有auto，则自动调整auto的值以使等式满足</li></ul></li><li><p>可设置auto的值：</p><p>margin width left right</p></li></ul><p>因为left 和 right的值默认是auto，如果不指定left和right，则等式不满足时，会自动调整这两个值。</p></li><li><p>垂直方向布局的等式的也必须要满足：</p><p>top + margin-top/bottom + padding-top/bottom + border-top/bottom + height = 包含块的高度</p></li></ul><h3 id="五、字体与背景"><a href="#五、字体与背景" class="headerlink" title="五、字体与背景"></a>五、字体与背景</h3><h4 id="5-1-字体"><a href="#5-1-字体" class="headerlink" title="5.1  字体"></a>5.1  字体</h4><ul><li><p>字体相关的样式：</p><ul><li><p>color：用来设置字体颜色</p></li><li><p>font-size：字体的大小</p></li><li><p>font-family：字体族（字体的格式）</p><p>可选值：</p><ul><li>serif  衬线字体</li><li>sans-serif 非衬线字体</li><li>monospace 等宽字体</li></ul></li></ul><ul><li>指定字体的类别，浏览器会自动使用该类别下的字体</li></ul></li></ul><p>​        - font-family 可以同时指定多个字体，多个字体间使用逗号隔开，字体生效时优先使用第一个，第一个无法            使用则使用第二个 以此类推。</p><ul><li><p>行高（line height）：</p><p>行高指的是文字占有的实际高度，可以通过line-height来设置行高，行高可以直接指定一个大小（px em），也可以直接为行高设置一个整数。如果是一个整数的话，行高将会是字体的指定的倍数。行高经常还用来设置文字的行间距，且行高会在字体框的上下平均分配。</p><ul><li>行间距 = 行高 - 字体大小</li><li>字体框：字体框就是字体存在的格子，设置font-size实际上就是在设置字体框的高度</li><li><strong>可以将行高设置为和高度一样的值，使单行文字在一个元素中垂直居中</strong></li></ul></li><li><p>字体的简写属性：</p><p>font 可以设置字体相关的所有属性</p><p>语法：</p><p>​        font: 字体大小/行高 字体族（行高 可以省略不写 如果不写使用默认值）</p><p>实例：</p><p>​        <code>-font: normal normal 50px/2  微软雅黑, &#39;Times New Roman&#39;, Times, serif;</code></p><ul><li><p>font-weight 字重、字体的加粗 </p><p>可选值：</p><ul><li>normal 默认值 不加粗</li><li>bold 加粗：100-900 九个级别（没什么用）</li></ul></li><li><p>font-style 字体的风格</p><p>可选值：</p><ul><li>normal 正常的</li><li>italic 斜体</li></ul></li></ul></li></ul><h4 id="5-2-图标字体（iconfont）"><a href="#5-2-图标字体（iconfont）" class="headerlink" title="5.2  图标字体（iconfont）"></a>5.2  图标字体（iconfont）</h4><p>在网页中经常需要使用一些图标，可以通过图片来引入图标。但是图片大小本身比较大，并且非常的不灵活。所以在使用图标时，我们还可以将图标直接设置为字体，然后通过font-face的形式来对字体进行引入，这样我们就可以通过使用字体的形式来使用图标。</p><ul><li><p>通过伪元素来设置图标字体：</p><ul><li><p>找到要设置图标的元素通过before或after选中</p></li><li><p>在content中设置字体的编码</p></li><li><p>设置字体的样式：</p><p><code>fab</code></p><p><code>font-family: &#39;Font Awesome 5 Brands&#39;;</code></p><p><code>fas</code></p><p><code>font-family: &#39;Font Awesome 5 Free&#39;;</code></p><p><code>font-weight: 900;</code> </p></li></ul></li></ul><ul><li><p>通过实体来使用图标字体：&amp;#x图标的编码</p><p><code>&lt;span class=&quot;fas&quot;&gt;&amp;#xf0f3;&lt;/span&gt;</code></p></li></ul><h4 id="5-3-文字样式"><a href="#5-3-文字样式" class="headerlink" title="5.3  文字样式"></a>5.3  文字样式</h4><ul><li><p>text-align 文本的水平对齐</p><p>可选值：</p><ul><li>left 左侧对齐</li><li>right 右对齐</li><li>center 居中对齐</li><li>justify 两端对齐</li></ul></li><li><p>vertical-align 设置元素垂直对齐的方式</p><p>可选值：</p><ul><li>baseline 默认值 基线对齐</li><li>top 顶部对齐</li><li>bottom 底部对齐</li><li>middle 居中对齐</li></ul></li><li><p>text-decoration 设置文本修饰</p><p>可选值：</p><ul><li>none 什么都没有</li><li>underline 下划线</li><li>line-through 删除线</li><li>overline 上划线</li></ul></li><li><p>white-space 设置网页如何处理空白</p><p>可选值：</p><ul><li>normal 正常</li><li>nowrap 不换行</li><li>pre 保留空白</li></ul></li></ul><h4 id="5-4-背景"><a href="#5-4-背景" class="headerlink" title="5.4  背景"></a>5.4  背景</h4><ul><li><p>background-image 设置背景图片 </p><ul><li>可以同时设置背景图片和背景颜色，这样背景颜色将会成为图片的背景色</li><li>如果背景的图片小于元素，则背景图片会自动在元素中平铺将元素铺满</li><li>如果背景的图片大于元素，将会一个部分背景无法完全显示</li><li>如果背景图片和元素一样大，则会直接正常显示</li></ul></li><li><p>background-repeat 用来设置背景的重复方式</p><p>可选值：</p><ul><li>repeat 默认值 ， 背景会沿着x轴 y轴双方向重复</li><li>repeat-x 沿着x轴方向重复</li><li>repeat-y 沿着y轴方向重复</li><li>no-repeat 背景图片不重复</li></ul></li><li><p>background-position 用来设置背景图片的位置</p><p>设置方式：</p><ul><li><p>通过 top left right bottom center 几个表示方位的词来设置背景图片的位置</p></li><li><p>使用方位词时必须要同时指定两个值，如果只写一个则第二个默认就是center。</p></li><li><p>通过偏移量来指定背景图片的位置：</p><p>水平方向的偏移量 垂直方向变量</p><p> <code>background-position: -60px 300px;</code></p></li></ul></li><li><p>background-clip 设置背景的范围 </p><p>可选值：</p><ul><li>border-box 默认值，背景会出现在边框的下边</li><li>padding-box 背景不会出现在边框，只出现在内容区和内边距</li><li>content-box 背景只会出现在内容区</li></ul></li><li><p>background-origin 背景图片的偏移量计算的原点</p><p>可选值：</p><ul><li>padding-box 默认值，background-position从内边距处开始计算</li><li>content-box 背景图片的偏移量从内容区处计算</li><li>border-box 背景图片的变量从边框处开始计算</li></ul></li><li><p>background-size 设置背景图片的大小</p><p>第一个值表示宽度 ，第二个值表示高度。如果只写一个，则第二个值默认是 auto。</p><p>cover 图片的比例不变，将元素铺满。</p><p>contain 图片比例不变，将图片在元素中完整显示。</p></li><li><p>background-attachment 背景图片是否跟随元素移动</p><p>可选值：</p><ul><li>scroll 默认值 背景图片会跟随元素移动</li><li>fixed 背景会固定在页面中，不会随元素移动</li></ul></li><li><p>background 背景相关的简写属性，所有背景相关的样式都可以通过该样式来设置</p></li></ul><p>​          并且该样式没有顺序要求，也没有哪个属性是必须写的。</p><p>​        background-color</p><p>​        background-image</p><p>​        background-repeat</p><p>​        background-position</p><p>​        background-size</p><p>​        background-origin</p><p>​        background-clip</p><p>​        background-attachment*</p><p>​        注意：</p><p>​                background-size必须写在background-position的后边，并且使用/隔开</p><p>​                <code>background-position/background-size</code></p><p>​                background-origin background-clip 两个样式 ，origin要在clip的前边</p><h4 id="5-5-渐变"><a href="#5-5-渐变" class="headerlink" title="5.5  渐变"></a>5.5  渐变</h4><p>通过渐变可以设置一些复杂的背景颜色，可以实现从一个颜色向其他颜色过渡的效果！！渐变是图片，需要通过background-image来设置。</p><ul><li><p>linear-gradient()  线性渐变，颜色沿着一条直线发生变化</p><p>如：linear-gradient(red,yellow) 红色在开头，黄色在结尾，中间是过渡区域。</p><p>线性渐变的开头，我们可以指定一个渐变的方向：</p><ul><li>to left</li><li>to right</li><li>to bottom</li><li>to top</li><li>deg 表示度数</li><li>turn 表示圈</li></ul><p>渐变可以同时指定多个颜色，多个颜色默认情况下平均分布，也可以手动指定渐变的分布情况。</p></li><li><p>repeating-linear-gradient() 可以平铺的线性渐变</p></li><li><p>radial-gradient()  径向渐变(放射性的效果)</p><p>默认情况下径向渐变的形状根据元素的形状来计算的：</p><ul><li><p>正方形 –&gt; 圆形</p></li><li><p>长方形 –&gt; 椭圆形</p></li></ul><p>我们也可以手动指定径向渐变的大小：</p><ul><li><p>circle</p></li><li><p>ellipse</p></li></ul><p>也可以指定渐变的位置</p><ul><li><p>语法：radial-gradient(大小 at 位置, 颜色 位置 ,颜色 位置 ,颜色 位置)</p></li><li><p>大小：</p><ul><li>circle 圆形</li><li>ellipse 椭圆</li><li>closest-side 近边 </li><li>closest-corner 近角</li><li>farthest-side 远边</li><li>farthest-corner 远角</li></ul></li><li><p>位置：</p></li></ul><p>​                top right left center bottom</p></li></ul><h3 id="六、表格与表单"><a href="#六、表格与表单" class="headerlink" title="六、表格与表单"></a>六、表格与表单</h3><h4 id="6-1-表格"><a href="#6-1-表格" class="headerlink" title="6.1  表格"></a>6.1  表格</h4><p>在现实生活中，我们经常需要使用表格来表示一些格式化数据，如：课程表、人名单、成绩单….</p><p>同样在网页中我们也需要使用表格，我们通过table标签来创建一个表格。</p><ul><li>表格<ul><li>表格 table</li><li>标题 caption</li><li>行 tr</li><li>表头单元格 th</li><li>表行单元格 td </li></ul></li></ul><p>    <table border="1" width='50%' align="center"><br>        <!-- 在table中使用tr表示表格中的一行，有几个tr就有几行 --><br>        <tr><br>            <!-- 在tr中使用td表示一个单元格，有几个td就有几个单元格 --><br>            <td>A1</td><br>            <td>B1</td><br>            <td>C1</td><br>            <td>D1</td><br>        </tr><br>        <tr><br>            <td>A2</td><br>            <td>B2</td><br>            <td>C2</td><br>            <!-- rowspan 纵向的合并单元格 --><br>            <td rowspan="2">D2</td><br>        </tr><br>        <tr><br>            <td>A3</td><br>            <td>B3</td><br>            <td>C3</td><br>        </tr><br>        <tr><br>            <td>A4</td><br>            <td>B4</td><br>            <!--                 colspan 横向的合并单元格             --><br>            <td colspan="2">C4</td><br>        </tr><br>    </table></p><ul><li><p>长表格</p><p>可以将一个表格分成三个部分：</p><ul><li>头部 thead</li><li>主体 tbody</li><li>底部 tfoot</li></ul></li></ul><table border="1" width='50%' align="center">        <thead>            <tr>                <th>日期</th>                <th>收入</th>                <th>支出</th>                <th>合计</th>            </tr>        </thead>        <tbody>            <tr>                <td>2000.1.1</td>                <td>500</td>                <td>200</td>                <td>300</td>            </tr>            <tr>                <td>2000.1.1</td>                <td>500</td>                <td>200</td>                <td>300</td>            </tr>            <tr>                <td>2000.1.1</td>                <td>500</td>                <td>200</td>                <td>300</td>            </tr>            <tr>                <td>2000.1.1</td>                <td>500</td>                <td>200</td>                <td>300</td>            </tr>        </tbody>        <tfoot>            <tr>                <td></td>                <td></td>                <td>合计</td>                <td>300</td>            </tr>    </tfoot></table><ul><li><p>表格的样式</p><p>border-spacing: 指定边框之间的距离</p><p>border-collapse: collapse; 设置边框的合并</p><p>如果表格中没有使用tbody而是直接使用tr，那么浏览器会自动创建一个tbody，并且将tr全都放到tbody中，tr不是table的子元素。</p></li></ul><h4 id="6-2-表单"><a href="#6-2-表单" class="headerlink" title="6.2  表单"></a>6.2  表单</h4><p>在现实生活中表单用于提交数据，在网页中也可以使用表单，网页中的表单用于将本地的数据提交给远程的服务器</p><p>使用form标签来创建一个表单，form的属性：action ——表单要提交的服务器的地址</p><ul><li><p>文本框</p><p>注意：数据要提交到服务器中，必须要为元素指定一个name属性值</p><p><code>文本框 &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</code></p></li><li><p>密码框</p><p><code>密码框 &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</code></p></li><li><p>单选按钮</p><p><strong>像这种选择框，必须要指定一个value属性，</strong>value属性最终会作为用户的填写的值传递给服务器</p><p>checked 可以将单选按钮设置为默认选中</p><p><code>单选按钮 &lt;input type=&quot;radio&quot; name=&quot;hello&quot; value=&quot;a&quot;&gt;</code></p><p><code>&lt;input type=&quot;radio&quot; name=&quot;hello&quot; value=&quot;b&quot; checked&gt;</code></p></li><li><p>多选框</p><p><code>多选框 &lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;1&quot;&gt;</code></p><p>​    <code>&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;2&quot;&gt;</code></p><p>​    <code>&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;3&quot; checked&gt;</code></p></li><li><p>下拉列表</p><p><code>&lt;select name=&quot;haha&quot;&gt;</code></p><p>​      <code>&lt;option value=&quot;i&quot;&gt;选项一&lt;/option&gt;</code></p><p>​      <code>&lt;option selected value=&quot;ii&quot;&gt;选项二&lt;/option&gt;</code></p><p>​      <code>&lt;option value=&quot;iii&quot;&gt;选项三&lt;/option&gt;</code></p><p><code>&lt;/select&gt;</code></p></li><li><p>提交按钮</p><p><code>&lt;input type=&quot;submit&quot; value=&quot;注册&quot;&gt;</code></p></li><li><p>表单的属性</p><ul><li><p>autocomplete = “off” 关闭自动补全</p></li><li><p>readonly 将表单项设置为只读，数据会提交·</p></li><li><p>disabled 将表单项设置为禁用，数据不会提交</p></li><li><p>autofocus 设置表单项自动获取焦点</p></li></ul></li></ul><p><code>&lt;input type=&quot;submit&quot;&gt;</code></p><p> <code>*&lt;!-- 重置按钮 --&gt;*</code></p><p> <code>&lt;input type=&quot;reset&quot;&gt;</code></p><p><code>*&lt;!-- 普通的按钮 --&gt;*</code></p><p><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot;&gt;</code></p><h3 id="七、过渡与动画"><a href="#七、过渡与动画" class="headerlink" title="七、过渡与动画"></a>七、过渡与动画</h3><h4 id="7-1-过渡（transition）"><a href="#7-1-过渡（transition）" class="headerlink" title="7.1  过渡（transition）"></a>7.1  过渡（transition）</h4><ul><li><p>定义：</p><p>通过过渡可以指定一个属性发生变化时的切换方式，创建一些非常好的效果，提升用户的体验。</p></li><li><p>transition-property: 指定要执行过渡的属性  </p><p>多个属性间使用逗号隔开 ，如果所有属性都需要过渡，则使用all关键字。</p><p>大部分属性都支持过渡效果，注意过渡时必须是从一个有效数值向另外一个有效数值进行过渡。</p><p><code>transition-property: height , width;</code></p></li><li><p>transition-duration: 指定过渡效果的持续时间</p><p>时间单位：s 和 ms  1 s = 1000 ms</p><p><code>transition-duration: 100ms, 2s;</code></p></li><li><p>transition-timing-function: 过渡的时序函数</p><p>作用：指定过渡的执行的方式  </p><p>可选值：</p><ul><li>ease 默认值，慢速开始，先加速，再减速</li><li>linear 匀速运动</li><li>ease-in 加速运动</li><li>ease-out 减速运动</li><li>ease-in-out 先加速 后减速</li><li>cubic-bezier() 来指定时序函数    <a href="https://cubic-bezier.com/">https://cubic-bezier.com</a></li><li>steps() 分步执行过渡效果</li></ul><p>可以设置一个第二个值：</p><ul><li>end ， 在时间结束时执行过渡(默认值)</li><li>start ， 在时间开始时执行过渡</li></ul><p><code>transition-timing-function: cubic-bezier(.24,.95,.82,-0.88);</code></p><p><code>transition-timing-function: steps(2, start);</code></p></li><li><p>transition-delay: 过渡效果的延迟，等待一段时间后在执行过渡</p><p><code>transition-delay: 2s;</code></p></li><li><p>transition：</p><p>可以同时设置过渡相关的所有属性。只有一个要求，如果要写延迟，则两个时间中第一个是持续时间，第二个是延迟。</p><p><code>transition:2s margin-left 1s cubic-bezier(.24,.95,.82,-0.88);</code></p></li></ul><h4 id="7-2-动画（animation）"><a href="#7-2-动画（animation）" class="headerlink" title="7.2  动画（animation）"></a>7.2  动画（animation）</h4><p>动画和过渡类似，都是可以实现一些动态的效果，不同的是过渡需要在某个属性发生变化时才会触发，动画可以自动触发动态效果。</p><p>设置动画效果，必须先要设置一个<strong>关键帧</strong>，关键帧设置了动画执行每一个步骤。</p><p> <code>@keyframes test &#123;</code></p><p>​      <code>/* from表示动画的开始位置 也可以使用 0% */</code></p><p>​      <code>from&#123;</code></p><p>​        <code>margin-left: 0;</code></p><p>​        <code>background-color: *orange*;</code></p><p>​      <code>&#125;</code> </p><p>​      <code>/* to动画的结束位置 也可以使用100% */</code></p><p>​      <code>to&#123;</code></p><p>​        <code>background-color: *red*;</code></p><p>​        <code>margin-left: 700px;</code></p><p>​      <code>&#125;</code></p><p>​    <code>&#125;</code></p><ul><li><p>animation-name：要对当前元素生效的关键帧的名字</p><p><code>animation-name: test;</code></p></li><li><p>animation-duration：动画的执行时间</p><p><code>animation-duration: 4s;</code></p></li><li><p>animation-delay：动画的延时</p><p><code>animation-delay: 2s</code></p></li><li><p>animation-timing-function：动画显示形式</p><p><code>animation-timing-function: ease-in-out;</code></p></li><li><p>animation-iteration-count：动画执行的次数</p><p>可选值：</p><p>次数(1 2 3 …)</p><p>infinite 无限执行</p><p><code>animation-iteration-count: 1;</code></p></li><li><p>animation-direction：指定动画运行的方向</p><p>可选值：</p><ul><li>normal 默认值  从 from 向 to运行 每次都是这样 </li><li>reverse 从 to 向 from 运行 每次都是这样 </li><li>alternate 从 from 向 to运行 重复执行动画时反向执行</li><li>alternate-reverse 从 to 向 from运行 重复执行动画时反向执行</li></ul><p><code>animation-direction: alternate-reverse;</code></p></li><li><p>animation-play-state: 设置动画的执行状态 </p><p>可选值：</p><ul><li>running 默认值 动画执行</li><li>paused 动画暂停</li></ul><p><code>animation-play-state: paused;</code></p></li><li><p>animation-fill-mode: 动画的填充模式</p><p>可选值：</p><ul><li>none 默认值 动画执行完毕元素回到原来位置</li><li>forwards 动画执行完毕元素会停止在动画结束的位置</li><li>backwards 动画延时等待时，元素就会处于开始位置</li><li>both 结合了forwards 和 backwards</li></ul><p><code>animation-fill-mode: both;</code></p></li></ul><h4 id="7-3-变形（translate）"><a href="#7-3-变形（translate）" class="headerlink" title="7.3  变形（translate）"></a>7.3  变形（translate）</h4><p>变形就是指通过CSS来改变元素的形状或位置，变形不会影响到页面的布局，transform 用来设置元素的变形效果</p><ul><li><p>平移：</p><ul><li>translateX() 沿着x轴方向平移</li><li>translateY() 沿着y轴方向平移</li><li>translateZ() 沿着z轴方向平移</li></ul><p><code>transform: translateY(-100px);</code></p></li></ul><p>注意：平移元素，百分比是相对于自身计算的</p><ul><li><p>Z轴平移</p><p>z轴平移，调整元素在z轴的位置，正常情况就是调整元素和人眼之间的距离，距离越大，元素离人越近。</p><p>z轴平移属于立体效果（近大远小），默认情况下网页是不支持透视，<strong>如果需要看见效果，必须要设置网页的视距，一般会设为800 px。</strong></p><p><code>html&#123;</code></p><p>​      <code>/* 设置当前网页的视距为800px，人眼距离网页的距离 */</code></p><p>​      <code>perspective: 800px;</code></p><p>​    <code>&#125;</code></p></li><li><p>旋转</p><p>通过旋转可以使元素沿着x y 或 z旋转指定的角度</p><ul><li>rotateX()</li><li>rotateY()</li><li>rotateZ()</li></ul><p>补充：backface-visibility: 是否显示元素的背面 </p><p><code>backface-visibility: *hidden*;</code></p></li><li><p>缩放</p><p>对元素进行缩放的函数：</p><ul><li>scaleX() 水平方向缩放</li><li>scaleY() 垂直方向缩放</li><li>scale() 双方向的缩放</li></ul></li></ul><h3 id="八、弹性盒与移动端"><a href="#八、弹性盒与移动端" class="headerlink" title="八、弹性盒与移动端"></a>八、弹性盒与移动端</h3><h4 id="8-1-弹性盒"><a href="#8-1-弹性盒" class="headerlink" title="8.1  弹性盒"></a>8.1  弹性盒</h4><ul><li><p>flex(弹性盒、伸缩盒)</p><p>CSS中的又一种布局手段，它主要用来代替浮动来完成页面的布局。flex可以使元素具有弹性，让元素可以跟随页面的大小的改变而改变。</p></li><li><p>弹性容器</p><p>要使用弹性盒，必须先将一个元素设置为弹性容器，我们通过 display 来设置弹性容器。</p><ul><li><code>display:flex</code>  设置为块级弹性容器</li><li><code>display:inline-flex</code> 设置为行内的弹性容器</li></ul></li><li><p>弹性容器的样式</p><p>flex-direction 指定容器中弹性元素的排列方式</p><p><code>flex-direction:row</code></p><p>可选值：</p><ul><li><p>row 默认值，弹性元素在容器中水平排列（左向右）</p><p>主轴 自左向右</p></li><li><p>row-reverse 弹性元素在容器中反向水平排列（右向左）</p><p>主轴 自右向左</p></li><li><p>column 弹性元素纵向排列（自上向下）</p></li><li><p>column-reverse 弹性元素方向纵向排列（自下向上）</p></li></ul><p>主轴：</p><p>​        弹性元素的排列方向称为主轴</p><p>侧轴：</p><p>​        与主轴垂直方向的称为侧轴</p></li><li><p>弹性元素</p><p>弹性容器的子元素是弹性元素（弹性项），弹性元素可以同时是弹性容器。</p><p>弹性元素的样式：</p><ul><li><p>flex-grow 指定弹性元素的伸展的系数</p><p>当父元素有多余空间的时，子元素如何伸展。</p><p>父元素的剩余空间，会按照比例进行分配。</p></li><li><p>flex-shrink 指定弹性元素的收缩系数</p><p>当父元素中的空间不足以容纳所有的子元素时，如何对子元素进行收缩。</p></li></ul></li></ul><h4 id="8-2-弹性容器的样式"><a href="#8-2-弹性容器的样式" class="headerlink" title="8.2  弹性容器的样式"></a>8.2  弹性容器的样式</h4><ul><li><p>flex-wrap: </p><p>设置弹性元素是否在弹性容器中自动换行</p><p>可选值：</p><ul><li>nowrap 默认值，元素不会自动换行</li><li>wrap 元素沿着辅轴方向自动换行</li><li>wrap-reverse 元素沿着辅轴反方向换行</li></ul></li><li><p>flex-flow:  wrap 和 direction 的简写属性</p><p><code>flex-flow: row wrap;</code></p></li><li><p><strong>justify</strong>-content:</p><p>如何分配<strong>主轴</strong>上的空白空间（主轴上的元素如何排列）</p><p>可选值：</p><ul><li>flex-start 元素沿着主轴起边排列</li><li>flex-end 元素沿着主轴终边排列</li><li>center 元素居中排列</li><li>space-around 空白分布到元素两侧</li><li>space-between 空白均匀分布到元素间</li><li>space-evenly 空白分布到元素的单侧</li></ul></li><li><p><strong>align</strong>-items: </p><p>元素在<strong>辅轴</strong>上如何对齐，元素间的关系</p><p>可选值：</p><ul><li>stretch 默认值，将元素的长度设置为相同的值</li><li>flex-start 元素不会拉伸，沿着辅轴起边对齐</li><li>flex-end 沿着辅轴的终边对齐</li><li>center 居中对齐</li><li>baseline 基线对齐 </li></ul></li></ul><h4 id="8-3-弹性元素的样式"><a href="#8-3-弹性元素的样式" class="headerlink" title="8.3  弹性元素的样式"></a>8.3  弹性元素的样式</h4><ul><li><p>flex-grow: 弹性的增长系数</p><p><code>flex-grow: 1;</code></p></li><li><p>弹性元素的缩减系数</p><p>缩减系数的计算方式比较复杂，缩减多少是根据 缩减系数 和 元素大小来计算</p><p><code>flex-shrink: 1;</code></p></li><li><p>flex-basis: 指定元素在主轴上的基础长度</p><ul><li><p>如果主轴是 横向的 则 该值指定的就是元素的宽度</p></li><li><p>如果主轴是 纵向的 则 该值指定的是就是元素的高度</p></li></ul><p>​        默认值是 auto，表示参考元素自身的高度或宽度；如果传递了一个具体的数值，则以该值为准。</p></li><li><p>flex 可以设置弹性元素所有的三个样式</p><p>语法：flex:增长 缩减 基础;</p><p>可选值：</p><ul><li>flex有一个默认值 initial，相当于 flex: 0 1 auto</li><li>flex有一个 auto，相当于 flex: 1 1 auto</li><li>flex有一个 none，相当于 flex: 0 0 auto 相当于弹性元素没有弹性</li></ul></li><li><p>order 决定弹性元素的排列顺序</p></li><li><p>align-self:用来覆盖当前元素上的align-items</p><p>可选值：</p><ul><li>stretch 默认值，将元素的长度设置为相同的值</li><li>flex-start 元素不会拉伸，沿着辅轴起边对齐</li><li>flex-end 沿着辅轴的终边对齐</li><li>center 居中对齐</li><li>baseline 基线对齐</li></ul><p><code>align-self:flex-end；</code></p></li><li><p>弹性容器的属性</p><ul><li>flex-direction：方向、flex-wrap：自动换行、flex-flow：前两个的简写、justify-content：主轴、align-item：辅轴、align-content</li></ul></li><li><p>弹性元素的属性</p><ul><li>order：元素排列顺序、flex-grow：弹性增长系数、flex-shrink：弹性收缩、flex-basis：在主轴上的基础长度、flex：增长 收缩 基础、align-self：如上</li></ul></li></ul><h4 id="8-4-像素与视口"><a href="#8-4-像素与视口" class="headerlink" title="8.4  像素与视口"></a>8.4  像素与视口</h4><ul><li><p>像素：<br>屏幕是由一个一个发光的小点构成，这一个个的小点就是像素。分辨率：1920 x 1080 说的就是屏幕中小点的数量。在前端开发中像素要分成两种情况讨论：CSS像素 和 物理像素</p><ul><li><p>物理像素，上述所说的小点点就属于物理像素</p></li><li><p>CSS像素，编写网页时，我们所用像素都是CSS像素</p></li></ul><p>浏览器在显示网页时，需要将CSS像素转换为物理像素然后再呈现。一个CSS像素最终由几个物理像素显示，由浏览器决定：默认情况下在pc端，一个css像素 = 一个物理像素</p></li><li><p>视口（viewport）</p><p>视口就是屏幕中用来显示网页的区域。可以通过查看视口的大小，来观察CSS像素和物理像素的比值。</p><ul><li><p>默认情况下：</p><p>视口宽度 1920 px（CSS像素）</p><p>1920 px（物理像素）</p><p>此时，CSS像素和物理像素的比是 1 : 1</p></li><li><p>放大两倍的情况：</p><p>视口宽度 960 px（CSS像素）</p><p>1920 px（物理像素）</p><p>此时，CSS像素和物理像素的比是1 : 2</p></li></ul><p>我们可以通过改变视口的大小，来改变CSS像素和物理像素的比值。</p></li></ul><h4 id="8-5-移动端"><a href="#8-5-移动端" class="headerlink" title="8.5  移动端"></a>8.5  移动端</h4><ul><li><p>移动端的简介：</p><p>在不同的屏幕，单位像素的大小是不同的，像素越小屏幕会越清晰，智能手机的像素点远远小于计算机的像素点。</p><p>24寸 1920 x 1080</p><p>4.7寸 750 x 1334</p><p>默认情况下，移动端的网页都会将视口设置为980像素（CSS像素），以确保PC端网页可以在移动端正常访问，但是如果网页的宽度超过了980，移动端的浏览器会自动对网页缩放以完整显示网页。所以基本大部分的PC端网站都可以在移动端中正常浏览，但是往往都不会有一个好的体验，为了解决这个问题，大部分网站都会专门为移动端设计网页。</p></li><li><p>移动端页面：</p><p>移动端默认的视口大小是980 px (CSS像素)，默认情况下，移动端的像素比：980/移动端宽度 （980/750）。</p><p>如果我们直接在网页中编写移动端代码，这样在980的视口下，像素比非常不好，会导致网页中的内容非常非常的小。</p><p>编写移动页面时，必须要确保有一个比较合理的像素比：</p><p>1 CSS像素 对应 2个物理像素 或 1 CSS像素 对应 3个物理像素</p><p>我们可以通过meta标签来设置视口大小，每一款移动设备设计时，都会有一个最佳的像素比，一般我们只需要将像素比设置为该值即可得到一个最佳效果。</p><p>将像素比设置为最佳像素比的视口大小我们称其为完美视口。将网页的视口设置为完美视口的方法如下：</p><meta name="viewport" content="width=device-width, initial-scale=1.0"></li><li><p>视口</p><p>不同的设备完美视口的大小是不一样的。由于不同设备视口和像素比不同，所以同样的375个像素在不同的设备下意义是不一样，比如在iPhone6中 375就是全屏，而到了plus中375就会缺一块。所以在移动端开发时，就不能再使用px来进行布局了。</p></li><li><p>vw适配</p><p>vw 表示的是视口的宽度（viewport width），100 vw = 一个视口的宽度，1 vw = 1%视口宽度。</p><p>vw这个单位永远相当于视口宽度进行计算</p><p>注意：<strong>网页中字体大小最小是12 px</strong>，如果我们设置了一个小于12 px的字体，则字体自动设置为12。</p></li></ul><h4 id="8-6-响应式布局"><a href="#8-6-响应式布局" class="headerlink" title="8.6  响应式布局"></a>8.6  响应式布局</h4><ul><li><p>响应式布局：</p><p>网页可以根据不通的设备或窗口大小呈现出不同的效果，使用响应式布局，可以使一个网页适用于所有设备。</p><p>响应布局的关键就是媒体查询。通过媒体查询，可以为不通的设备，或设备不同状态来分别设置样式。</p></li><li><p>媒体查询：</p><ul><li><p>语法： @media 查询规则{}</p></li><li><p>媒体类型：</p><ul><li>all 所有设备</li><li>print 打印设备</li><li>screen 带屏幕的设备</li><li>speech 屏幕阅读器</li></ul><p>可以使用逗号连接多个媒体类型，这样它们之间就是一个或的关系。</p><p>可以在媒体类型前添加一个only，表示只有。only的使用主要是为了兼容一些老版本浏览器</p></li></ul></li><li><p>媒体特性：</p><ul><li>width 视口的宽度</li><li>height 视口的高度</li><li>min-width 视口的最小宽度（视口大于指定宽度时生效）</li><li>max-width 视口的最大宽度（视口小于指定宽度时生效）</li></ul></li><li><p>断点：</p><p>样式切换的分界点，我们称其为断点，也就是网页的样式会在这个点时发生变化。</p><p>一般比较常用的断点：</p><ul><li>小于768 超小屏幕 max-width=768px</li><li>大于768 小屏幕  min-width=768px</li><li>大于992 中型屏幕 min-width=992px</li><li>大于1200 大屏幕  min-width=1200px</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
